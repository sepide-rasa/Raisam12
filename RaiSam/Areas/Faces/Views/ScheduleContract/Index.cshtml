@model IEnumerable<RaiSam.Models.prs_SelectScheduleTitleByFirstContract>

@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

<script src="~/Scripts/accounting.js"></script>
@(Html.X().Window().Modal(true)//.Listeners(li => li.AfterRender.Handler = "ReloadDynamicRating(0);")
.Width(500)//.Height(300)
    .Title("زمانبندی پروژه")
                     .ID("NewScheduleContract")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel().Border(false)
        .Border(false).ButtonAlign(Ext.Net.Alignment.Center)
            .Margin(10)
            .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
               .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ToolTip("کلید میانبر F8").Margin(10)
                      
                           .Listeners(l =>
                           {
                               l.Click.Handler = "SaveScheduleContract();";

                           })
                           .ItemID("btnSave")
                               .Disabled(@ViewBag.IsInClient == 0)
                            ,
                            X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                                               .OnClientClick("App.NewScheduleContract.destroy()"))

                .Items(
                X.Panel().Border(false)

            .Items(
                X.FieldSet().Border(false)
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                .Defaults(new { Margin = 2 })
                .Items(
                X.Hidden().ItemID("fldId")
               ,  X.AntiForgeryField().ItemID("AntiForgeryField")
                    , X.FieldSet().Border(false)
                        .Layout(Ext.Net.LayoutType.HBox)
                    .Items(
                              X.Label("پروژه:"),
                                X.ComboBox()
                            .ItemID("cboProject")
                                .Editable(false).Width(400)
                                .AllowBlank(false)
                                        .BlankText("لطفاً پروژه را انتخاب نمایید.")
                                .TypeAhead(true)
                                .LabelAlign(Ext.Net.LabelAlign.Right)
                                .QueryMode(Ext.Net.DataLoadMode.Local)
                                .DisplayField("Name")
                                .ValueField("ID")
                                        .EmptyText("پروژه")
                                            .Listeners(l => l.Select.Handler = "ReloadDynamicRating()")
                                .Store(
                                    X.Store()
                             .Listeners(l => l.Load.Handler = "setDefaultProj();")
                                          .Listeners(l => l.BeforeLoad.Handler = "App.NewScheduleContract.queryById('cboProject').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.NewScheduleContract.queryById('AntiForgeryField').getValue());")
                                        .Model(X.Model()
                                            .IDProperty("ID")
                                            .Fields(
                                                new Ext.Net.ModelField("ID", Ext.Net.ModelFieldType.String) { Mapping = "Id" },
                                                new Ext.Net.ModelField("Name", Ext.Net.ModelFieldType.String) { Mapping = "Name" }))
                                            .Proxy(X.AjaxProxy()
                                                .ActionMethods(l => l.Read = HttpMethod.POST)
                                                    .Url(Url.Action("GetProject"))
                                        .Reader(X.JsonReader().Root("data"))
                                                    .ExtraParams(l => l.Add(new { ReqId = ViewBag.ReqId }))
                                            )
                            )
                            ).ColSpan(4)
                            , X.FieldSet().Border(false)
                            .Items(
                                 Html.X().GridPanel()
                                .ID("GridDynamicRating")
                    .Icon(Icon.Table)
                    .Frame(true)
                    .Title(" زمانبندی")
                    .Height(350)
                    .Width(430)
                    .Store(
                            Html.X().StoreForModel().Control(s =>
                        {
                            // s.AutoSync = true;
                        })

                                   //.Listeners(li => li.BeforeLoad.Handler = "ReloadTajhizat()")
                    )
                       .ColumnModel(
                            Html.X().RowNumbererColumn(),
                                    Html.X().Column().DataIndex(Model, m => m.fldScheduleTitleId).Text("کد").Flex(1).Hidden(true),
                                Html.X().Column().DataIndex(Model, m => m.fldScheduleContractId).Text("کد").Flex(1).Hidden(true),
                                Html.X().Column().DataIndex(Model, m => m.fldTitleSchedule).Text("عنوان").Flex(2),
                                            Html.X().Column().DataIndex(Model, m => m.fldAzTarikh).ItemID("AzTarikh").Text("از تاریخ").Flex(2).Editor(X.TextField().Plugins(X.InputMask().Mask("AAAA/AA/AA")
                                            .MaskSymbols(ls =>
                                                        {
                                                            ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                                        })
                                                    )
                            /*PDateField().Listeners(l => l.Change.Handler = "CheckMablaghReyali()")*/),
                                        Html.X().Column().DataIndex(Model, m => m.fldTaTarikh).ItemID("TaTarikh").Text("تا تاریخ").Flex(2).Editor(X.TextField().Plugins(X.InputMask().Mask("AAAA/AA/AA")
                                                .MaskSymbols(ls =>
                                                            {
                                                                ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                                            })
                                                        )/*PDateField().Listeners(l => l.Change.Handler = "CheckMablaghArzi()")*/)

                        )

                    //.TopBar(
        //    Html.X().Toolbar()
        //        .Items(
        //            Html.X().Button()
        //            .Text("اضافه")
        //            .Icon(Icon.Add)
        //                    .Handler("insertDynamicRating")
        //      , Html.X().Button()
        //                            .ItemID("RemoveDynamicRating")
        //                .Text("حذف")
        //                .Icon(Icon.Exclamation)
        //                    .Listeners(li => li.Click.Handler = "if (App.NewScheduleContract.queryById('GridDynamicRating').selModel.getLastSelected() == null) {Ext.MessageBox.show({ title: 'خطا', msg: 'لطفا یک سطر را انتخاب کنید',icon: Ext.MessageBox.ERROR,buttons: Ext.MessageBox.OK});return false;}else ItemsDynamicDelete();")
        //        )
        //)
                        .Plugins(
                                Html.X().CellEditing()

                        )
                        )
                        )

                )
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
            )
        )
)
@(Html.X().KeyMap()
                             .ID("NewScheduleContractMap")
                             .Target("={App.NewScheduleContract.getTargetEl()}")
            .Binding(b =>
            {
                b.Add(Html.X().KeyBinding()
                .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                .Handler("SaveScheduleContract(); ")
                );

            }))
<script type="text/javascript">
    var ItemDynamicRatingID = 0; var TreeId = 0;
    var DynamicRatingId = ""; var ToolName = "";


    function ReloadDynamicRating() {
        var cboProject = App.NewScheduleContract.queryById('cboProject');
        if (cboProject.getValue() != null) {
            Ext.net.DirectMethod.request({
                url: '/ScheduleContract/ReloadDetail',
                params: {
                    Proj: cboProject.getValue()
                },
                success: function (data) {
                    App.NewScheduleContract.queryById('GridDynamicRating').getStore().loadData(data);
                }
            });
        }
    }

    function setDefaultProj() {
        var cboProject = App.NewScheduleContract.queryById('cboProject');
        cboProject.select(cboProject.store.getAt(0));
        ReloadDynamicRating();
    }



   

    function SaveScheduleContract() {

        var fldId = App.NewScheduleContract.queryById('fldId');
        var cboProject = App.NewScheduleContract.queryById('cboProject');
            var er = false;

            if (cboProject.validate() == false) {
                er = true;
            }

            if (er == true)
                return;
            var DynamicRating = new Array();
            var AzTarikh;
            var TaTarikh;
            var SelectedRow = App.NewScheduleContract.queryById('GridDynamicRating');
            for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
                row = SelectedRow.selModel.store.data.items[i];
                AzTarikh = row.data.fldAzTarikh;
                TaTarikh = row.data.fldTaTarikh;

                if (AzTarikh != "") {
                    if (TaTarikh == '' || TaTarikh == null)
                        TaTarikh = "";
                    DynamicRating.push({
                        'fldScheduleTitleId': row.data.fldScheduleTitleId,
                        'fldAzTarikh': row.data.fldAzTarikh,
                        'fldTaTarikh': TaTarikh,
                        'fldId': row.data.fldScheduleContractId,
                        'fldFirstContractId': cboProject.getValue()
                    });
                }
                else if (DynamicRating == null) {
                    alert("لطفا جدول زمانبندی را تکمیل کنید.");
                    return;
                }
            }
            var data1 = {
                ItemDetail: DynamicRating,
                FirstContractId: cboProject.getValue()
            };
            $.ajax({
                type: "POST",
                url: '/ScheduleContract/Save',
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(data1),
                datatype: "json",
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        Name: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.ScheduleContract.queryById('GridScheduleContract').store.load();

                },
                failure: function (data) {
                    alert(data.data);
                }
            });
        }

        function EnterNext() {
            var keyfield = App.NewScheduleContract.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
            var nextfld = keyfield.nextSibling();
            nextfld.focus();
            nextfld.selectText();
        }
</script>