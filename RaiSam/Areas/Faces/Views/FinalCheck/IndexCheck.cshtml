@model IEnumerable<RaiSam.Models.FinalCheckGrid>
    @using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities
@{

    var X = Html.X();
}
<script>
    var template = '<img src={0} alt="" onclick={2} onmouseover="" style="{3}" title={1} />';

    var Colored = function (value) {
        var Pic = "@Url.Content("~/Content/BtnOk.png")";
        var ToolTip = "تایید";
        if (value == 0) {
            Pic = "@Url.Content("~/Content/BtnNotOk.png")";
            var ToolTip = "خطا";
        }
        else if (value == 2) {
            Pic = "@Url.Content("~/Content/BtnWarning.png")";
            var ToolTip = "هشدار";
        }
        return Ext.String.format(template, Pic, ToolTip);
    };
</script>

@(X.Window()
        // .Height(300)
    .Width(530)
    .Modal(true)
    .ID("FinalCheck")
    .Listeners(l => l.AfterRender.Handler = "FormLoadFinal()")
    .Title("ارسال برای بررسی")
    .Icon(Ext.Net.Icon.PageAdd)
    .Closable(true)
    .Border(false)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(Ext.Net.LayoutType.Fit)
    .ButtonAlign(Ext.Net.Alignment.Center)
    .Buttons(
        Html.X().Button()
            .Text("ارسال")
            .ItemID("btnErsal")
            .Icon(Icon.Disk)
            .Listeners(l => l.Click.Handler = "SaveNewFinalCheck();"),
        Html.X().Button()
            .Text("خروج")
            .Icon(Icon.BulletCross)
            .Listeners(l => l.Click.Handler = "App.FinalCheck.destroy()")
    )
        .Items(
            X.Panel()
                .MarginSpec("10px 0 10px 0")
                .ItemID("PnlNewFinalCheck")
                .Border(false)
                .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Defaults(new { Margin = 10 })
                .Items(

                 X.AntiForgeryField().ItemID("AntiForgeryField"),

                X.FieldSet()
                .Title("مشخصات")
                .ItemID("test")
                .Height(78)
                .Defaults(new { Margin = 2 })
                .Layout(LayoutType.Table)
                .LayoutConfig(new TableLayoutConfig { Columns = 2 })
                .Border(true)
                .Items(
        /* X.Label(ViewBag.Title).ColSpan(2).Width(400),*/
                             X.Label("پروژه:"),
                            X.ComboBox()
                        .ItemID("cboProject").ReadOnly(true)
                            .Editable(false).Width(400)
                            .AllowBlank(false)
                                    .BlankText("لطفاً پروژه را انتخاب نمایید.")
                            .TypeAhead(true)
                            .LabelAlign(Ext.Net.LabelAlign.Right)
                            .QueryMode(Ext.Net.DataLoadMode.Local)
                            .DisplayField("Name")
                            .ValueField("ID")
                                    .EmptyText("پروژه")
                            .Store(
                                X.Store()
                         .Listeners(l => l.Load.Handler = "setDefaultProj();")
                              .Listeners(l => l.BeforeLoad.Handler = "App.FinalCheck.queryById('cboProject').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.FinalCheck.queryById('AntiForgeryField').getValue());")
                                    .Model(X.Model()
                                        .IDProperty("ID")
                                        .Fields(
                                            new Ext.Net.ModelField("ID", Ext.Net.ModelFieldType.String) { Mapping = "Id" },
                                            new Ext.Net.ModelField("Name", Ext.Net.ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(X.AjaxProxy()
                                            .ActionMethods(l => l.Read = HttpMethod.POST)
                                                .Url(Url.Action("GetProject"))
                                    .Reader(X.JsonReader().Root("data")))
                        )
                        ,
                            X.Label("ارسال به:"),
                            X.ComboBox()
                        .ItemID("cboCharkhe")
                            .Editable(false).Width(400).ReadOnly(true)
                            .AllowBlank(false)
                                    .BlankText("لطفاً چرخه را انتخاب نمایید.")
                            .TypeAhead(true)
                            .LabelAlign(Ext.Net.LabelAlign.Right)
                            .QueryMode(Ext.Net.DataLoadMode.Local)
                            .DisplayField("Name")
                            .ValueField("ID")
                                .EmptyText("چرخه")
                            .Store(
                                X.Store()
                         .Listeners(l => l.Load.Handler = "setDefaulta();")
                          .Listeners(l => l.BeforeLoad.Handler = "App.FinalCheck.queryById('cboCharkhe').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.FinalCheck.queryById('AntiForgeryField').getValue());")
                                    .Model(X.Model()
                                        .IDProperty("ID")
                                        .Fields(
                                            new Ext.Net.ModelField("ID", Ext.Net.ModelFieldType.String) { Mapping = "Id" },
                                            new Ext.Net.ModelField("Name", Ext.Net.ModelFieldType.String) { Mapping = "Name" }))
                                        .Proxy(X.AjaxProxy()
                                            .ActionMethods(l => l.Read = HttpMethod.POST)
                                            .Url(Url.Action("GetCharkhe"))
                                    .Reader(X.JsonReader().Root("data")))
                        )




                )
                ,
                      X.Panel()
                .ItemID("GridPanel")
                .Frame(true)
                .Border(false)
                .AutoScroll(true)
                .Layout(Ext.Net.LayoutType.Fit)
                .Items(
      

                        X.GridPanel()
                            .AutoScroll(true)
                                .ItemID("GridFinalCheck")
 
            .Height(150)
            .Width(460)
                            .Store(
                                X.StoreForModel()
      
                                    .PageSize(200000)
                                    .RemoteFilter(true)

                                )
                            .View(
                                Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                            )
                            .ColumnModel(
                                Html.X().RowNumbererColumn().Flex(1),
                                Html.X().Column().DataIndex(Model, m => m.FnTitle).Text("Fn").Hidden(true).Flex(15),
                                    Html.X().Column().DataIndex(Model, m => m.status).Text("وضعیت").Flex(1).Renderer("Colored"),
                                Html.X().Column().DataIndex(Model, m => m.name).Text("عنوان").Flex(15)
                                )
                            .Plugins(
                                    Html.X().CellEditing()
                            )

             
                    )
                )
)
)
<script>
    function FormLoadFinal() {
        if ('@ViewBag.IsInClient' == 0)
            App.FinalCheck.queryById('btnErsal').setDisabled(true);

        App.FinalCheck.body.mask('در حال بررسی...');
        Ext.net.DirectMethod.request({
            url: '/FinalCheck/ReloadGrid2',
            timeout: 7200000,
            success: function (data) {
                var end = 0;
                var fns = data.Functions;
                var Functions = fns.split(';');
                for (var i = 0; i < Functions.length - 1; i++) {
                    if (i == Functions.length - 2) {
                        end = 1;
                        /* alert(Functions[i]);*/
                    }
                    var URL = '/FinalCheck/' + Functions[i];
                    Ext.net.DirectMethod.request({
                        url: URL,
                        timeout: 7200000,
                        params: {
                            RequestID: data.RequestID,
                            CharkheId: data.CharkheId,
                            HadafId: data.HadafId,
                            ActionId:data.ActionId,
                            end: end
                        },
                        success: function (result) {
                            var GridData = result.GridData;
                            var grid = App.FinalCheck.queryById('GridFinalCheck');
                            for (var j = 0; j < GridData.length; j++) {
                                grid.store.insert(grid.store.count(), { name: GridData[j].name, status: GridData[j].status, FnTitle: GridData[j].FnTitle });
                                /* App.FinalCheck.queryById('GridFinalCheck').getStore().loadData(GridData);*/
                                if (result.end == 1) {
                                    App.FinalCheck.body.mask().hide();
                                }
                            }

                        }
                    });
                }
                setDefault();
            }
        });
    }
    function setDefaulta() {
        var cboCharkhe = App.FinalCheck.queryById('cboCharkhe');
        cboCharkhe.select(cboCharkhe.store.getAt(0));
    }
    function setDefaultProj() {
        var cboProject = App.FinalCheck.queryById('cboProject');
        cboProject.select(cboProject.store.getAt(0));
    }

    function SaveNewFinalCheck() {
        var cboCharkhe = App.FinalCheck.queryById('cboCharkhe');
        var cboProject = App.FinalCheck.queryById('cboProject');

        var k = 0;
        var SelectedRow = App.FinalCheck.queryById('GridFinalCheck');
        for (var i = 0; i < SelectedRow.selModel.store.count() ; i++) {
            row = SelectedRow.selModel.store.data.items[i];
            status = row.data.status;
            if (status == "0") {
                k = 1;
            }
        }
        if (k == 0) {

            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای ارسال پروژه مورد نظر اطمینان دارید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال ورود...' });
                        Ext.net.DirectMethod.request({
                            url: "/Faces/FinalCheck/SaveEnterCycles",
                            params: {
                                ContractId: cboProject.getValue(),
                                CharkheId: cboCharkhe.getValue(),
                                __RequestVerificationToken: App.FinalCheck.queryById('AntiForgeryField').getValue()
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.MsgTitle == "خطا") {
                                    ic = Ext.MessageBox.ERROR;
                                }
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: ic,
                                    buttons: Ext.MessageBox.OK
                                });
                                Ext.net.Mask.hide();
                                if (data.MsgTitle != "خطا") {
                                    App.FinalCheck.destroy();
                                    location.reload();
                                }
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            App.FinalCheck.body.mask().hide();
            Ext.MessageBox.show({
                title: "خطا",
                msg: "ابتدا موارد ضروری را تکمیل نمایید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }


</script>