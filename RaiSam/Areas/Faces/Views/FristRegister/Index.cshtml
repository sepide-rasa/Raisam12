@model IEnumerable<RaiSam.Models.prs_tblHadafSabtNamSelect>
@{
    Layout = "~/Areas/Faces/Views/Shared/_shared.cshtml";
}
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using RaiSam.Models;

@{var X = Html.X();}


<style>
    td {
        text-align: right;
    }

    body {
        background-color: #dfe8f6;
    }
</style>
@(

 X.Panel()

    .Title("")
        .Listeners(l => l.AfterRender.Handler = "App.FristRegister.queryById('karbarInf').disable(true);LoadCaptha();")
    .Border(false)
        .ID("FristRegister")
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(LayoutType.Fit)

    .Items(
                X.Panel()
                    .Border(false)
                    .ID("pnl")
                        .Layout(Ext.Net.LayoutType.VBox)
                            .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                    .AutoScroll(true)
                    .Border(false)

                    .Items(

                     X.AntiForgeryField().ItemID("AntiForgeryField"),
                   X.Panel()
                        .Border(false).Width(600).Height(605)
                                .Icon(Icon.Lock)
                            .ID("pnlFristRegister")
                        .ButtonAlign(Alignment.Left)
                        .AutoScroll(true)
                        .Title("ثبت نام")
                        .Frame(true)
                        .Margin(5)
                            .Buttons(
                                    X.Button()
                                        .Text("ادامه")
                                        .Icon(Ext.Net.Icon.ArrowTurnRight)
                                        .Flat(true)
                                                .Listeners(l => l.Click.Handler = "VerificationCode();")

                                     , X.Button()
                                        .Text("انصراف")
                                            .Icon(Ext.Net.Icon.BulletCross)
                                        .Flat(true)
                                            .Listeners(l => l.Click.Handler = "ExitLogon()")
                                    , X.SplitButton()
                                    .Text("راهنما")
                                    .Icon(Ext.Net.Icon.Help)
                                    .Menu(X.Menu()
                                    .Items(
                                    X.MenuItem()
                                                .Text("راهنما متنی")
                                                .Icon(Ext.Net.Icon.TextPaddingTop)
                                                .Listeners(l => l.Click.Handler = "HelpFirstRegister()")
                                                .ItemID("btnHelpFirstRegister"),
                                        X.MenuItem()
                                                .Text("راهنما تصویری")
                                                .Icon(Ext.Net.Icon.PlayBlue)
                                                    .Listeners(l => l.Click.Handler = "Help_VideoFirstRegister()")

                                )
                            )


                                    )
                    .Items(

                    X.FieldSet().Border(false)
                .Center()
                .Defaults(new { Margin = 10 })

                .Items(
                           X.Hidden().ItemID("fldId")
                                    , X.FieldSet().Title("توجه")
                                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 2 })
                                .Defaults(new { Margin = 10 })
                                .Items(
                                     X.Label().ItemID("lblMohtavaHtml")
                                         .Listeners(l => l.AfterRender.Handler = "loadMohtavaHtml()")
        // .Text("مانندبا توجه به مشکلات بوجود آمده در پست الکترونیکی دامنه‌های خارجی (مخصوصاً ایمیل های yahoo و gmail) از تاریخ 04/04/1391 کلیه آدرس های پست الکترونیکی درخواست شده در سامانه ساجات بایستی با دامنه ir وارد شوند تا امکان دریافت گذرواژه ارسالی از طریق سامانه برای کاربران در کمترین زمان ممکن امکان پذیر شود. لذا خواهشمند است ابتدا آدرس پست الکترونیکی با دامنه ir ایجاد نموده و سپس در سامانه ساجات ثبت نام فرمائید. برای نمونه پست الکترونیکی سامانه چاپار به آدرس https://www.chmail.ir پیشنهاد می‌شود.")

                                )
                                     , X.FieldSet().Title("هدف از ثبت نام")
                                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 1 })
                                    .Defaults(new { Margin = 2 })
                                    .Items(
                                            X.GridPanel()
                                                .Height(200).Width(505)
                            .ItemID("GridStakeholdersTree")
                                .Listeners(l => l.AfterRender.Handler = "ReloadGridData();")
        //  .BottomBar(X.PagingToolbar().HideRefresh(true))
        // .Icon(Icon.Table)
                            .Frame(true)
                            .AutoScroll(true)
        //.Title("ذینفعان")
                            .Store(
                                X.StoreForModel()
                                    .RemoteFilter(true)
                                    .PageSize(40)
        //    .Proxy(Html.X().AjaxProxy()
        //    .Url(Url.Action("ReadStakeholders"))
        //    .Reader(Html.X().JsonReader().Root("data"))
        //)
                                        )
                                            .HideHeaders(true)
                            .Plugins(X.FilterHeader().Remote(false))
                            .SelectionModel(
                                Html.X().CheckboxSelectionModel().PruneRemoved(false).ShowHeaderCheckbox(false)
                                    .Mode(SelectionMode.Multi).CheckOnly(true).Listeners(l => l.SelectionChange.Fn = "ChekSelected"))
                            .ColumnModel(
        //Html.X().RowNumbererColumn(),
                                Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                                    Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("نام ذینفعان").Flex(6).Wrap(true)
                    )

                         //            X.ComboBox()
        //                 .Width(500)
        //            .ItemID("CboType")
        //            .TypeAhead(true)
        //            .Editable(false)
        //            .QueryMode(DataLoadMode.Local)
        //            .ForceSelection(true)
        //            .TriggerAction(TriggerAction.All)
        //            .DisplayField("Name")
        //            .ValueField("ID")
        //            .EmptyText("هدف از ثبت نام خود را انتخاب کنید")
        //            .Store(X.Store()
        //            .Model(X.Model()
        //            .IDProperty("fldId")
        //            .Fields(
        //                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
        //                                new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
        //                    )
        //                        )
        //            .Proxy(X.AjaxProxy()
        //                            .Url(Url.Action("GetHadafSabtNam"))
        //            .Reader(X.JsonReader().Root("data"))
        //                    )
        //                    )
        //            .AllowBlank(false)
        //.Listeners(l => l.Change.Handler = "ChangeType()")
                                          )
          
                                      , X.FieldSet().Title("اطلاعات کاربر").ItemID("karbarInf")
                                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 1 })
                                    .Defaults(new { Margin = 2 })
                                    .Items(
                                            X.Label().Text("پست الکترونیک:"),
                                       X.TextField()
                                       .RTL(false)
                                        .ItemID("txtEmail")
        // .FieldLabel("پست الکترونیک")
                                        .MsgTarget(Ext.Net.MessageTarget.Side)
                                        .AllowBlank(false).Width(500)
                                        .BlankText("لطفا پست الکترونیک را وارد کنید.")
                                        .LabelAlign(Ext.Net.LabelAlign.Top)
                                            .EmptyText("Example@chmail.ir")
                                            ,
                                            X.Label().Text("شناسه کاربری پیشنهادی:")
                                        , X.TextField()
                                        .ItemID("txtUserName")
                                                    .Width(500).Listeners(li => li.Focus.Handler = "checkEmail()")
                                        //.FieldLabel("شناسه کاربری پیشنهادی")
                                        .MsgTarget(Ext.Net.MessageTarget.Side)
                                        .AllowBlank(false)
                                        .BlankText("لطفا شناسه کاربری را وارد کنید.")
                                        .LabelAlign(Ext.Net.LabelAlign.Top)
                                                , X.Label().Text("شماره موبایل:"),
                                        X.TextField()
                                        .RTL(false)
                                        .ItemID("txtMobail")
                                        .Width(500).Listeners(li => li.Focus.Handler = "checkUserName()")
        //     .FieldLabel("شماره موبایل")
                                        .MsgTarget(Ext.Net.MessageTarget.Side)
                                        .AllowBlank(false)
                                        .MaskRe("/[0-9]/")
                                        .BlankText("لطفا شماره موبایل را وارد کنید.")
                                        .LabelAlign(Ext.Net.LabelAlign.Top)
                                        .EmptyText("09111111111")
                                            .Plugins(X.InputMask()
                                                .Mask("09AAAAAAAAA")
                                                .ClearWhenInvalid(true)
                                                .MaskSymbols(ls =>
                                                {
                                                    ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9]", Placeholder = "_".ToCharArray()[0] });
                                                })
                                            )
                            )
                                    , X.FieldSet().Title("کد حفاظتی")
                                        .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                                            .Defaults(new { Margin = 2 })
                                            .Items(
        //X.Image().ItemID("Image").Width(215).Height(70).Border(true).ColSpan(2)
                                       X.Container().Content(@<div><img id="m_imgCaptcha" style="width:200px;height:90px" /><span id="BtnRefresh" style="font-size: 11px;font-family: tornado tahoma;width: 25px;height:25px;text-align: left;align-content:center;background-image: url('/Content/refresh1.png');background-repeat: no-repeat;"></span></div>).ColSpan(4)
                                        , X.Label("لطفا کد حفاظتی را مطابق تصویر وارد کنید:")
                                    ,X.Container().Content(@<div><input id='txtCaptha' class='text' style='direction:ltr;font-family:sans-serif;width: 100px;height: 22px;' /></div>)
                                    //, X.TextField()
                                    //.ItemID("txtCaptha").Listeners(li => li.Focus.Handler = "checkMobail()")
                                    //.FieldLabel("لطفا کد حفاظتی را مطابق تصویر وارد کنید")
                                    //.MsgTarget(Ext.Net.MessageTarget.Side)
                                    //.AllowBlank(false).Width(215)
                                    //.BlankText("Captha: این فیلد باید مقداری داشته باشد.")
                                    //.LabelAlign(Ext.Net.LabelAlign.Top)
                                    , X.Button().Icon(Ext.Net.Icon.ArrowRefresh)
                                   .Handler("LoadCaptha")
                                   // .Listeners(l => l.Click.Handler = "LoadCaptha()")
                                )
                         )
                        //.Layout(Ext.Net.LayoutType.VBox)
                        //.LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                    )
              )
         )
)
<script type="text/javascript">
    var Mobile = "";
  
    var s1;
    var s2;
    var LoadNow = true;
    function ChekSelected(a, b) {
        s1 = a;
        s2 = b;
        if (b.length>0) {
            App.FristRegister.queryById('karbarInf').enable(true);
            App.FristRegister.queryById('txtUserName').validate();
            App.FristRegister.queryById('txtMobail').validate();
            App.FristRegister.queryById('txtEmail').validate();
        }
        else
            App.FristRegister.queryById('karbarInf').disable(true);
        /*var IsCheked = false;
        var last = a.lastSelected.data.fldId;
        var LastSelectId = b.length - 1;
        if (b.length != 0) {
            var LastSelect = b[LastSelectId].data.fldId;
            if (last == LastSelect)
                IsCheked = true;
            else
                IsCheked = false;
        }*/
        var AllTrees = "";
        for (var i = 0; i < b.length; i++) {
            AllTrees = AllTrees + b[i].data.fldId + ";";
        }
        if (LoadNow)
            ReloadGridData(AllTrees, b);
    }
    function ReloadGridData(Trees, array) {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/FristRegister/ReadHadaf',
            params: {
                Trees: Trees,
                __RequestVerificationToken: App.FristRegister.queryById('AntiForgeryField').getValue()
            },
            success: function (data) {

                App.FristRegister.queryById('GridStakeholdersTree').store.loadData(data.data);
                App.FristRegister.queryById('GridStakeholdersTree').getSelectionModel().clearSelections();
                if (Trees != "" && Trees != null) {
                    LoadNow = false;
                    for (var j = 0; j < array.length; j++) {
                        var index = App.FristRegister.queryById('GridStakeholdersTree').getStore().findExact("fldId", array[j].data.fldId);
                        App.FristRegister.queryById('GridStakeholdersTree').getSelectionModel().select(index, true);

                        if (j == array.length - 1)
                            LoadNow = true;
                    }
                }
                Ext.net.Mask.hide();
            }
        });

    }
    function ChangeType() {
        var CboType = App.FristRegister.queryById('CboType');
        if (CboType.getValue() !== "") {
            App.FristRegister.queryById('karbarInf').enable(true);
            App.FristRegister.queryById('txtUserName').validate();
            App.FristRegister.queryById('txtMobail').validate();
            App.FristRegister.queryById('txtEmail').validate();
           /* App.FristRegister.queryById('txtCaptha').validate();*/
        }
        else
            App.FristRegister.queryById('karbarInf').disable(true);
    }
  
    function VerificationCode() {

        var txtCaptha = $('#txtCaptha').val();
        /*var txtCaptha = App.FristRegister.queryById('txtCaptha');*/
        var Peymankar = App.FristRegister.queryById('Peymankar');
        var Rily = App.FristRegister.queryById('Rily');
        var Nazerin = App.FristRegister.queryById('Nazerin');
        var txtEmail = App.FristRegister.queryById('txtEmail');
        var txtUserName = App.FristRegister.queryById('txtUserName');
        var txtMobail = App.FristRegister.queryById('txtMobail');
        Mobile = txtMobail.getValue();
        var Id = App.FristRegister.queryById('fldId');
        var CboType = App.FristRegister.queryById('CboType');
        var er = false;


        if (txtEmail.validate() == false) {
            er = true;
        }
        if (txtUserName.validate() == false) {
            er = true;
        }
        if (txtMobail.validate() == false) {
            er = true;
            alert("لطفا شماره موبایل را وارد کنید.");
        }
        if (txtCaptha == "") {
            er = true;
            alert("لطفا کد امنیتی را وارد نمایید.");
        }

        var SelRows = App.FristRegister.queryById('GridStakeholdersTree').getSelectionModel().getSelection();
        var HadafIds = "";
        if (SelRows.length != 0) {
            for (var i = 0; i < SelRows.length; i++) {
                HadafIds = HadafIds + SelRows[i].data.fldId + ";";
            }
        }
        else {
            er = true;
            alert("حداقل یه مورد هدف ثبت نام را انتخاب نمایید.");
        }


        if (er == true)
            return;

        var Type;/* = CboType.getValue();*/
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Faces/FristRegister/checkMobail',
            params: {
                Mobail: txtMobail.getValue()
            },
            success: function (data) {
                if (data.captchaEnd == true) {
                    LoadCaptha();
                }
                var m = txtMobail.getValue();

                if (m.substring(0, 2) != "09") {
                    Ext.net.Mask.hide();
                    Ext.MessageBox.show({
                        title: 'خطا',
                        msg: 'موبایل وارد شده نامعتبر است.',
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                    er = true;
                    return;
                }
                else {
                    if (data.flag == true) {
                        Ext.net.Mask.hide();
                        Ext.MessageBox.show({
                            title: 'خطا',
                            msg: 'موبایل وارد شده تکراری است.',
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                        er = true;
                        return;
                    }
                    else {
                        Ext.net.DirectMethod.request({
                            url: '/Faces/FristRegister/checkUserName',
                            params: {
                                UserName: txtUserName.getValue()
                            },
                            success: function (data) {
                                if (data.captchaEnd == true) {
                                    LoadCaptha();
                                }
                                if (data.flag == true) {
                                    Ext.net.Mask.hide();
                                    Ext.MessageBox.show({
                                        title: 'خطا',
                                        msg: 'شناسه کاربری وارد شده تکراری است.',
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else {//
                                    Ext.net.DirectMethod.request({
                                        url: '/Faces/FristRegister/checkEmail',
                                        params: {
                                            Email: txtEmail.getValue(),
                                        },
                                        success: function (data) {

                                            if (data.captchaEnd == true) {
                                                LoadCaptha();
                                            }
                                            if (data.flag == true) {
                                                Ext.net.Mask.hide();
                                                Ext.MessageBox.show({
                                                    title: 'خطا',
                                                    msg: 'آدرس پست الکترونیک وارد شده تکراری است.',
                                                    icon: Ext.MessageBox.ERROR,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }
                                            else if (data.valid == false) {
                                                Ext.net.Mask.hide();
                                                Ext.MessageBox.show({
                                                    title: 'خطا',
                                                    msg: 'آدرس پست الکترونیک نامعتبر است.',
                                                    icon: Ext.MessageBox.ERROR,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }
                                            /*else if (data.ir == false) {
                                                Ext.net.Mask.hide();
                                                Ext.MessageBox.show({
                                                    title: 'خطا',
                                                    msg: 'آدرس پست الکترونیک  می بایست در دامنه ir باشد.',
                                                    icon: Ext.MessageBox.ERROR,
                                                    buttons: Ext.MessageBox.OK
                                                });
                                            }*/

                                            else {
                                                Ext.net.DirectMethod.request({
                                                    url: '/Faces/FristRegister/CheckCaptcha',
                                                    params: {
                                                        Capthatext: txtCaptha
                                                    },
                                                    success: function (data) {
                                                        if (data.Err == 1) {
                                                            Ext.net.Mask.hide();
                                                            Ext.MessageBox.show({
                                                                title: data.MsgTitle,
                                                                msg: data.Msg,
                                                                icon: Ext.MessageBox.ERROR,
                                                                buttons: Ext.MessageBox.OK
                                                            });
                                                            LoadCaptha();
                                                            er = true;
                                                            return;
                                                        }
                                                        else {

                                                            Ext.net.DirectMethod.request({
                                                                url: '/Faces/FristRegister/Save',
                                                                params: {
                                                                    fldId: Id.getValue(),
                                                                    fldEmail: txtEmail.getValue(),
                                                                    fldUserName: txtUserName.getValue(),
                                                                    fldMobile: txtMobail.getValue(),
                                                                    fldHadafId: Type,
                                                                    fldSelectedHadaf: HadafIds,
                                                                    __RequestVerificationToken: App.FristRegister.queryById('AntiForgeryField').getValue()
                                                                },
                                                                success: function (data12) {
                                                                    if (data12.Err == 1) {
                                                                        Ext.net.Mask.hide();
                                                                        Ext.MessageBox.show({
                                                                            title: data12.MsgTitle,
                                                                            msg: data12.Msg,
                                                                            icon: Ext.MessageBox.ERROR,
                                                                            buttons: Ext.MessageBox.OK
                                                                        });
                                                                    }
                                                                    else {
                                                                        Ext.net.Mask.hide();
                                                                        Ext.net.DirectMethod.request({
                                                                            url: '/Faces/FristRegister/VerificationCode',
                                                                            params: {
                                                                                Mobile: txtMobail.getValue()
                                                                            },
                                                                            success: function (data) {
                                                                               /* Ext.MessageBox.show({
                                                                                    title: data12.MsgTitle,
                                                                                    msg: data12.Msg,
                                                                                    icon: Ext.MessageBox.ERROR,
                                                                                    buttons: Ext.MessageBox.OK
                                                                                });*/
                                                                                ClearFristRegister();
                                                                            }
                                                                        });
                                                                    }
                                                                }
                                                            });
                                                        }
                                                    }
                                                });
                                            }
                                        }
                                    });
                                }
                            }

                        });
                    }
                }
            }
        });

                    /*       Ext.net.DirectMethod.request({
                 url: '/FristRegister/checkUserName',
            params: {
                UserName: txtUserName.getValue()
            },
            success: function (data) {
                if (data.flag == true) {
                    Ext.MessageBox.show({
                        title: 'خطا',
                        msg: 'شناسه کاربری وارد شده تکراری است.',
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                    er = true;
                    return;
                }
            }
        });


        if (Rily.getValue() == true)
            Type = 3;
        else if (Peymankar.getValue() == true)
            Type = 1;
        else if (Nazerin.getValue() == true)
            Type = 2;*/





    }
    function ClearFristRegister() {

        App.FristRegister.queryById('txtEmail').setValue("");
        App.FristRegister.queryById('txtUserName').setValue("");
        App.FristRegister.queryById('txtMobail').setValue("");
        /*App.FristRegister.queryById('txtCaptha').setValue("");*/
        $('#txtCaptha').val("");
        App.FristRegister.queryById('fldId').setValue(0);
    }
    function checkEmail() {

        var txtEmail = App.FristRegister.queryById('txtEmail');
        if (txtEmail.getValue() == "") {
            Ext.MessageBox.show({
                title: 'خطا',
                msg: 'لطفا آدرس پست الکترونیک را وارد نمایید.',
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            Ext.net.DirectMethod.request({
                url: '/Faces/FristRegister/checkEmail',
                params: {
                    Email: txtEmail.getValue()
                },
                success: function (data) {
                    if (data.flag == true) {
                        Ext.MessageBox.show({
                            title: 'خطا',
                            msg: 'آدرس پست الکترونیک وارد شده تکراری است.',
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                    else if (data.valid == false) {
                        Ext.MessageBox.show({
                            title: 'خطا',
                            msg: 'آدرس پست الکترونیک نامعتبر است.',
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }
                   /* else if (data.ir == false) {
                        Ext.MessageBox.show({
                            title: 'خطا',
                            msg: 'آدرس پست الکترونیک  می بایست در دامنه ir باشد.',
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK
                        });
                    }*/


                }
            });
        }

    }
    function checkUserName() {
        var txtUserName = App.FristRegister.queryById('txtUserName');
        Ext.net.DirectMethod.request({
            url: '/Faces/FristRegister/checkUserName',
            params: {
                UserName: txtUserName.getValue()
            },
            success: function (data) {
                if (data.flag == true) {
                    Ext.MessageBox.show({
                        title: 'خطا',
                        msg: 'شناسه کاربری وارد شده تکراری است.',
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
        });
    }
    function checkMobail() {
        var txtMobail = App.FristRegister.queryById('txtMobail');
        Ext.net.DirectMethod.request({
            url: '/Faces/FristRegister/checkMobail',
            params: {
                Mobail: txtMobail.getValue()
            },
            success: function (data) {
                if (data.flag == true) {
                    Ext.MessageBox.show({
                        title: 'خطا',
                        msg: 'موبایل وارد شده تکراری است.',
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
            }
        });

    }

    function loadMohtavaHtml() {
        var lblMohtavaHtml = App.FristRegister.queryById('lblMohtavaHtml');
        Ext.net.DirectMethod.request({
            url: '/Faces/FristRegister/MohtavaHtml',
            success: function (data) {
                lblMohtavaHtml.setText(data.MohtavaHTML, false);
            }
        });
    }
    function ExitLogon() {
        window.location.href = '@Url.Content("~/Account/Logon")'
    }

    var LoadCaptha = function () {
        var originalSrc = '@Url.Content("~/Faces/FristRegister/generateCaptcha")';
        var antiCachePart = (new Date()).getTime();
        var newSrc = originalSrc + '?dc=' + antiCachePart;
        $("#m_imgCaptcha").attr('src', newSrc);

    }

    function EnterNext() {
        var keyfield = App.FristRegister.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
        var nextfld = keyfield.nextSibling();
        nextfld.focus();
        nextfld.selectText();

    }
    function HelpFirstRegister() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Faces/FristRegister/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }

    function Help_VideoFirstRegister() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Faces/FristRegister/VideoWinFristRegister',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }
</script>
<style>
    .x-fieldset-header-text {
        font: 11px/14px;
        color: #15428b;
        padding: 1px 0;
    }
</style>
