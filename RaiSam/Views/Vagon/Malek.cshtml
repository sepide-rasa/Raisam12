@model IEnumerable<RaiSam.Models.prs_tblVagon_MalekSelect>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
<style>
    .custom-icon2 {
        margin-right: 410px !important;
    }
</style>
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };


    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
@(Html.X().Window().Modal(true)
.Width(630)//.Height(220)
             .Title("مالکان واگن")
        .ID("NewMalekVagon")
         //   .Listeners(li => { li.AfterRender.Fn = "addKeyMapIndexWin"; })
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)

    .Items(
                X.Panel()
                                    .Defaults(new { Margin = 5 })
                 .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
                .Border(false)
                    .Buttons(
                    X.Button()
                        .Text("ذخیره")
                        .Icon(Ext.Net.Icon.Disk)
                            .Listeners(l => l.Click.Handler = "SaveMalekVagon();"),
                             X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
                                                        .Listeners(Li => Li.Click.Handler = "EditMalekVagon();"),
                                        X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                                            .Listeners(de =>
                                            {
                                                de.Click.Handler = "DeleteMalekVagon();";
                                            }),
                    X.Button()
                        .Text("خروج")
                        .Icon(Ext.Net.Icon.DoorOut)
                        .OnClientClick("App.NewMalekVagon.destroy()"))
                .ButtonAlign(Ext.Net.Alignment.Center)
                .Items(
        //X.Panel()
        //    .Border(true)
        //        .Layout(Ext.Net.LayoutType.VBox)
        //    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
        //    .Items(
                            X.FieldSet()
                                .Border(true)
                                .Title("مشخصات")
                                .Width(520)
                                .Defaults(new { Margin = 2 })
                                .Layout(LayoutType.Table)
                                .LayoutConfig(new TableLayoutConfig { Columns = 6 })
                                    .Items(
                                        X.AntiForgeryField().ItemID("antiForgeryToken"),
                                X.Hidden().ItemID("fldId").Value(0),
                                    X.Hidden().ItemID("fldMalekVagonId").Value(0),
                                X.Label("نام مالک:")
                               ,
                                X.TextField()
                                    .ItemID("txtMalek")
                                    .Width(430)
                                        .AllowBlank(false)
                                            .ReadOnly(true)
                                    .AutoFocus(true)
                                        .Icon(Icon.UserAdd)
                                    .MaxLength(300)
                                    .EnforceMaxLength(true)
                                    .BlankText("لطفا نام مالک را وارد کنید.")
                                         .Listeners(l =>
                                            {
                                                l.SpecialKey.Handler = "searchMalekss(e.getKey())";
                                                l.IconClick.Handler = "searchMalekss(45)";
                                                l.AfterRender.Handler = "App.NewMalekVagon.queryById('txtMalek').icon.dom.classList.add('custom-icon2');";
                                            })
                                        .ColSpan(5),

                                   X.Label().Text("از تاریخ:").ItemID("lblAzTarikh"),
                                            X.PDateField()
                                                    .Width(100)
                                            .ItemID("txtAzTarikh")
                                            .AllowBlank(false)
                                            .MaskRe("[0-9,/]")
                                            .BlankText("لطفا از تاریخ را وارد کنید.")
                                            .PaddingSpec("0 0 0 10px").Listeners(l => l.Select.Handler = "ChangeAzTarikh_KarkardD()")
                                            .Editable(false),
                                        X.Label().Text("تا تاریخ:").ItemID("lblTaTarikh"),
                                            X.PDateField()
                                                    .Width(100)
                                            .ItemID("txtTaTarikh")
                                                .MaskRe("[0-9,/]")
        // .PaddingSpec("0 0 0 10px")
                                            .AllowBlank(false)
                                                        .BlankText("لطفا تا تاریخ را وارد کنید.").Listeners(l => l.Select.Handler = "ChangeTaTarikh_KarkardD()")
                                            .Editable(false)
                                            ,
                                            X.Label("نوع مالکیت:"),
                        X.ComboBox()
                        .ItemID("CboTypeMalek")
                        .TypeAhead(true)
                        .Editable(false)
                                                    .Width(100)
                            .ForceSelection(true)
                        .QueryMode(DataLoadMode.Local)
                        .TriggerAction(TriggerAction.All)
                        .DisplayField("fldName")
                        .ValueField("fldId")
                        .EmptyText("...")
        //.Width(300)
                        .AllowBlank(false)
                        .BlankText("لطفا نوع مالکیت را انتخاب کنید.")
                        .Store(X.Store()
        //.Listeners(l => l.Load.Handler = "LoadVagon();")
                            .Model(X.Model()
                                .IDProperty("fldId")
                                .Fields(
                                    new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                    new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                    )
                            )
                                            .Listeners(l => l.BeforeLoad.Handler = "App.NewMalekVagon.queryById('CboTypeMalek').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.NewMalekVagon.queryById('antiForgeryToken').getValue());")
                            .Proxy(X.AjaxProxy()
                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                        .Url(Url.Action("GetTypeMalek"))
                                .Reader(X.JsonReader().Root("data"))
                            )
                        )
                                )
        //)
        ),
                  X.GridPanel().AutoScroll(true)
                                        .ItemID("GridMalekVagon").Flex(2)
                        .BottomBar(X.PagingToolbar())
                        .Height(200)
        //.ColumnWidth(0.6)
        //.Layout(Ext.Net.LayoutType.Column)
                        .Store(
                            X.StoreForModel()
                                             .Listeners(l => l.DataChanged.Handler = "App.NewMalekVagon.queryById('GridMalekVagon').selModel.refresh();")
                            .Proxy(Html.X().AjaxProxy()
                                                .Url(Url.Action("ReadMaleks"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                               .ExtraParams(x => x.Add(new { vagonId = @ViewBag.Id }))
                            )
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)

                        )
                        .View(
                            Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                        )

                       // .Plugins(X.FilterHeader().Remote(true))
                            .ColumnModel(
                                Html.X().Column().DataIndex(Model, m => m.fldMalekInfoId).Text("کد مالک").Hidden(true).Flex(1),
                                    Html.X().Column().DataIndex(Model, m => m.fldNameMalek).Text("نام شرکت").Flex(6),
                                Html.X().Column().DataIndex(Model, m => m.fldAzTarikh).Text("از تاریخ").Flex(2),
                                Html.X().Column().DataIndex(Model, m => m.fldTatarikh).Text("تا تاریخ").Flex(2),
                                    Html.X().Column().DataIndex(Model, m => m.fldTitleMalekiyat).Text("نوع مالکیت").Flex(3)
                        )
        //.Layout(Ext.Net.LayoutType.VBox)
        //.LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
            )
)


<script type="text/javascript">
    function ChangeTaTarikh_KarkardD() {
        var txtAzTarikh = App.NewMalekVagon.queryById('txtAzTarikh');
        var txtTaTarikh = App.NewMalekVagon.queryById('txtTaTarikh');
        txtTaTarikh.setMinValue(txtAzTarikh.getValue());
        txtTaTarikh.minText = "تا تاریخ باید بعد از تاریخ " + txtAzTarikh.rawValue + "باشد";
    }
    function ChangeAzTarikh_KarkardD() {
        var txtAzTarikh = App.NewMalekVagon.queryById('txtAzTarikh');
        var txtTaTarikh = App.NewMalekVagon.queryById('txtTaTarikh');
        txtAzTarikh.setMaxValue(txtTaTarikh.getValue());
        txtAzTarikh.maxText = "از تاریخ باید قبل از تا تاریخ " + txtTaTarikh.rawValue + "باشد";
    }
    function searchMalekss(Code) {
        if (Code == 45) {
            App.NewMalekVagon.body.mask("در حال بارگذاری");
            Ext.net.DirectMethod.request({
                url: '/SearchMalek_Vagon/Index',
                params: {
                    State: 1,
                },
                success: function () {
                    App.NewMalekVagon.body.mask().hide();
                }
            });
        }
    }
    function EditMalekVagon() {
        var SelectedRow = App.NewMalekVagon.queryById('GridMalekVagon').selModel.getLastSelected();

        if (SelectedRow != null) {
            App.NewMalekVagon.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/Vagon/DetailsMalekVagon',
                params: {
                    Id: SelectedRow.data.fldId,
                    __RequestVerificationToken: App.NewMalekVagon.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {

                    var txtAzTarikh = App.NewMalekVagon.queryById('txtAzTarikh');
                    txtAzTarikh.setValue(data.fldAzTarikh);
                    var txtTaTarikh = App.NewMalekVagon.queryById('txtTaTarikh');
                    txtTaTarikh.setValue(data.fldTatarikh);
                    var fldMalekVagonId = App.NewMalekVagon.queryById('fldMalekVagonId');
                    fldMalekVagonId.setValue(data.fldMalekInfoId);
                    var txtMalek = App.NewMalekVagon.queryById('txtMalek');
                    txtMalek.setValue(data.fldNameMalek);
                    var CboTypeMalek = App.NewMalekVagon.queryById('CboTypeMalek');
                    CboTypeMalek.setValue(data.fldTypeMalekiyatId);
                    var Id = App.NewMalekVagon.queryById('fldId');
                    Id.setValue(data.fldId);
                    App.NewMalekVagon.body.mask().hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function SaveMalekVagon() {
        var txtAzTarikh = App.NewMalekVagon.queryById('txtAzTarikh');
        var txtTaTarikh = App.NewMalekVagon.queryById('txtTaTarikh');
        var fldMalekVagonId = App.NewMalekVagon.queryById('fldMalekVagonId');
        var txtMalek = App.NewMalekVagon.queryById('txtMalek');
        var CboTypeMalek = App.NewMalekVagon.queryById('CboTypeMalek');
        var fldId = App.NewMalekVagon.queryById('fldId');



        var er = false;
        if (txtMalek.validate() == false) {
            er = true;
        }
        if (txtAzTarikh.validate() == false) {
            er = true;
        }

        if (CboTypeMalek.validate() == false) {
            er = true;
        }
        if (er == true)
            return;


        
            App.NewMalekVagon.body.mask("در حال ذخیره سازی");
           
                Ext.net.DirectMethod.request({
                    url: '/Vagon/SaveMalekVagon',
                    params: {
                        fldId: fldId.getValue(),
                        fldMalekInfoId: fldMalekVagonId.getValue(),
                        fldAzTarikh: txtAzTarikh.rawValue,
                        fldTatarikh: txtTaTarikh.rawValue,
                        fldVagonId: '@ViewBag.Id',
                        fldTypeMalekiyatId: CboTypeMalek.getValue(),
                        __RequestVerificationToken: App.NewMalekVagon.queryById('antiForgeryToken').getValue()
                    },
                success: function (result) {
                    var ic = Ext.MessageBox.INFO;
                    if (result.Er == 1) {
                        ic = Ext.MessageBox.ERROR;
                    }
                    Ext.MessageBox.show({
                        title: result.MsgTitle,
                        msg: result.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    if (result.Er != 1) {
                        ClearMalekVagon();
                    }
                    App.NewMalekVagon.queryById('GridMalekVagon').getStore().load();
                    App.NewMalekVagon.body.mask().hide();
                    /*App.SearchBelak.body.mask().hide();*/
                },
                failure: function (data) {
                    alert(data.data);
                }
            });

        }

        function ClearMalekVagon() {
            App.NewMalekVagon.queryById('txtAzTarikh').setValue("");
            App.NewMalekVagon.queryById('txtAzTarikh').setValue("");
            App.NewMalekVagon.queryById('txtMalek').setValue("");
            App.NewMalekVagon.queryById('fldMalekVagonId').setValue(0);
            App.NewMalekVagon.queryById('fldId').setValue(0);
        }
        function DeleteMalekVagon() {
            var SelectedHeaderRow = App.NewMalekVagon.queryById('GridMalekVagon').selModel.getLastSelected();
            if (SelectedHeaderRow != null) {
                Ext.MessageBox.show({
                    title: "هشدار",
                    msg: "آیا برای حذف مطمئن هستید؟",
                    icon: Ext.MessageBox.WARNING,
                    buttons: Ext.MessageBox.YESNO,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                            Ext.net.DirectMethod.request({
                                url: '/Vagon/DeleteMalekVagon',
                                params: {
                                    id: SelectedHeaderRow.data.fldId,
                                    __RequestVerificationToken: App.NewMalekVagon.queryById('antiForgeryToken').getValue()
                                },
                                success: function (data) {
                                    var ic = Ext.MessageBox.INFO;
                                    if (data.Er == 1) {
                                        ic = Ext.MessageBox.ERROR;
                                    }
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: ic,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    if (data.Er != 1) {
                                        ClearMalekVagon();
                                    }
                                    App.NewMalekVagon.queryById('GridMalekVagon').store.load();
                                             
                                }
                            });
                        }
                    }
                });
            }
            else {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا یک سطر را انتخاب کنید",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
            }
        }

        var addKeyMapMalekVagon = function (cmp) {
            this.keyMap = new Ext.util.KeyMap({
                target: cmp.getEl(),
                binding: [{
                    key: [13, 9], /*Ext.EventObject.ENTER,*/
                    fn: function (key, e) {
                        if (e.getKey() == 9) {
                            e.stopEvent();
                        }
                        var keyfield = App.NewMalekVagon.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                        var nextfld;
                        if (keyfield.itemId == "txtMetrajMosaferi") {
                            return;
                        }
                        else {
                            nextfld = keyfield.nextSibling().nextSibling();
                            nextfld.selectText();
                        }
                        nextfld.focus();
                        nextfld.selectText();
                    }
                }]
            });
        }
</script>