@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
<style>
    .custom-icon {
        margin-right: 120px !important;
    }
</style>

@(Html.X().Window().Modal(true).Listeners(li => { li.Render.Fn = "addKeyMapVagon"; })
.Width(550)//.Height(300)
    .Title("ثبت واگن")
             .ID("NewVagon")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .ButtonAlign(Ext.Net.Alignment.Center)
        .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk)
                .Listeners(l =>
                {
                    l.Click.Handler = "SaveVagon();";

                })
                        .ItemID("btnSaveVagon")
                ,
                X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                .OnClientClick("App.NewVagon.hide();"))
    .Items(
        X.AntiForgeryField()
                .ItemID("antiForgeryToken").Hidden(true),
            X.Panel().Border(false)
            .Items(
                X.FieldSet().Border(true).Title("واگن")
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                .Defaults(new { Margin = 2 })
                .Items(
                X.Hidden().ItemID("fldId"),
                X.Label("نوع واگن:"),
                X.ComboBox()
                .ItemID("CboTypeVagon")
                .TypeAhead(true)
                .Editable(true)
                    .ForceSelection(true)
                        .AutoFocus(true)
                .QueryMode(DataLoadMode.Local)
                .TriggerAction(TriggerAction.All)
                .DisplayField("fldName")
                .ValueField("fldId")
                .EmptyText("...")
        //.Width(300)
                .AllowBlank(false)
                .BlankText("لطفا نوع را انتخاب کنید.")
                .Store(X.Store()
                                .Listeners(l => l.Load.Handler = "LoadVagon();")
                    .Model(X.Model()
                        .IDProperty("fldId")
                        .Fields(
                            new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                            new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                            )
                    )
                        .Listeners(l => l.BeforeLoad.Handler = "App.NewVagon.queryById('CboTypeVagon').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.NewVagon.queryById('antiForgeryToken').getValue());")
                    .Proxy(X.AjaxProxy()
                        .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                .Url(Url.Action("GetTypeVagon"))
                        .Reader(X.JsonReader().Root("data"))
                    )
                )//.Width(330)
                .ColSpan(4)
                ,
                     //    X.Hidden().ItemID("fldMalek_InfoId"),
                     //X.Label("مالک واگن:"),
                     //       X.TextField()
                     //           .ItemID("txtMalekVagon")
                     //           .AllowBlank(false)
                     //           .ReadOnly(true)
                     //           .FieldStyle("padding-right:4px;")
                     //           .Icon(Icon.UserAdd)
                     //           .BlankText("لطفا مالک واگن را انتخاب کنید.")
                     //           .Listeners(l =>
                     //           {
                     //               l.SpecialKey.Handler = "searchMalek(e.getKey())";
                     //               l.IconClick.Handler = "searchMalek(45)";
                     //               l.AfterRender.Handler = "App.NewVagon.queryById('txtMalekVagon').icon.dom.classList.add('custom-icon');";
                     //           }),

                     X.Label("شماره واگن:"),
                     X.TextField()
                     .ItemID("txtShomare")
                        .MaxLength(100)//.Width(330)
                    .EnforceMaxLength(true)
                    .AllowBlank(false)//.MaskRe("[1-9 ,),(,ا-ی-آ-ئ-ء]")
                    .BlankText("لطفا شماره را وارد کنید."),
                     X.Label("وزن خالی:"),
                     X.TextField()
                     .ItemID("txtVaznKhali")
                    .MaxLength(20)
                    .EnforceMaxLength(true)
                    .AllowBlank(false)//.MaskRe("[1-9 ,),(,ا-ی-آ-ئ-ء]")
                    .BlankText("لطفا وزن را وارد کنید.")
                     , X.Label("طول واگن:"),
                     X.TextField()
                         .ItemID("txtToolVagon")
                    .MaxLength(20)
                    .EnforceMaxLength(true)
                    .AllowBlank(false)//.MaskRe("[1-9 ,),(,ا-ی-آ-ئ-ء]")
                    .BlankText("لطفا طول واگن را وارد کنید.")
                    , X.Label("کاربری واگن:"),
                        X.ComboBox()
                            .ItemID("CboKarbariVagon")
                            .Editable(false)
                            .TypeAhead(true)
                            .BlankText("لطفا کاربری واگن را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .AllowBlank(false)
                            .EmptyText("...")
                            .Items(
                                new ListItem("مسافری", "1"),
                                new ListItem("باری", "0")
                                )
                            .SelectedItems(new { Value = "1" })
                        )

                )
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
        )
)
<script type="text/javascript">
    var fldTimeStamp = 0;

    function searchMalek(Code) {
        if (Code == 45) {
            App.NewVagon.body.mask("در حال بارگذاری");
            Ext.net.DirectMethod.request({
                url: '/SearchMalek_Vagon/Index',
                params: {
                    State: 1,
                },
                success: function () {
                    App.NewVagon.body.mask().hide();
                }
            });
        }
    }
    function LoadVagon() {
        ReplaceArabic();
        if ('@ViewBag.Id' != '0') {
            App.NewVagon.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/Vagon/Details',
                params: {
                    Id: '@ViewBag.Id',
                    __RequestVerificationToken: App.NewVagon.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {

                    var CboTypeVagon = App.NewVagon.queryById('CboTypeVagon');
                    CboTypeVagon.setValue(data.fldTypeVagonId);
                    var txtVaznKhali = App.NewVagon.queryById('txtVaznKhali');
                    txtVaznKhali.setValue(data.fldVaznKhali);
                    var txtToolVagon = App.NewVagon.queryById('txtToolVagon');
                    txtToolVagon.setValue(data.fldToolVagon);
                    var CboKarbariVagon = App.NewVagon.queryById('CboKarbariVagon');
                    CboKarbariVagon.setValue(data.fldKarbariVagon);
                    var txtShomare = App.NewVagon.queryById('txtShomare');
                    txtShomare.setValue(data.fldShomareVagon);
                   /* var txtMalekVagon = App.NewVagon.queryById('txtMalekVagon');
                    txtMalekVagon.setValue(data.fldNameCompany);
                    var fldMalek_InfoId = App.NewVagon.queryById('fldMalek_InfoId');
                    fldMalek_InfoId.setValue(data.fldMalek_InfoId);*/
                    var Id = App.NewVagon.queryById('fldId');
                    Id.setValue(data.fldId);
                    fldTimeStamp = data.fldTimeStamp;
                    App.NewVagon.body.mask().hide();
                }
            });
        }
        else {
            App.NewVagon.queryById('txtShomare').validate();
            App.NewVagon.queryById('CboTypeVagon').validate();
        }

    }

    function SaveVagon() {
        var CboTypeVagon = App.NewVagon.queryById('CboTypeVagon');
        var txtShomare = App.NewVagon.queryById('txtShomare');
        var Id = App.NewVagon.queryById('fldId');
        /* var fldMalek_InfoId = App.NewVagon.queryById('fldMalek_InfoId');
         var txtMalekVagon = App.NewVagon.queryById('txtMalekVagon');*/
        var txtVaznKhali = App.NewVagon.queryById('txtVaznKhali');
        var txtToolVagon = App.NewVagon.queryById('txtToolVagon');
        var CboKarbariVagon = App.NewVagon.queryById('CboKarbariVagon');
            var er = false;

            if (txtShomare.validate() == false) {
                er = true;
            }
            if (CboTypeVagon.validate() == false) {
                er = true;
            }
            if (txtVaznKhali.validate() == false) {
                er = true;
            }
            if (txtToolVagon.validate() == false) {
                er = true;
            }
            if (CboKarbariVagon.validate() == false) {
                er = true;
            }
           /* if (txtMalekVagon.validate() == false) {
                er = true;
            }*/
            if (er == true)
                return;

            App.NewVagon.body.mask("در حال ذخیره سازی");
            Ext.net.DirectMethod.request({
                url: '/Vagon/Save',
                params: {
                    fldId: Id.getValue(),
                    fldTypeVagonId: CboTypeVagon.getValue(),
                    fldTypeVagon: CboTypeVagon.getDisplayValue(),
                    fldShomareVagon: txtShomare.getValue(),
                    fldVaznKhali: txtVaznKhali.getValue(),
                    fldToolVagon: txtToolVagon.getValue(),
                    fldKarbariVagon: CboKarbariVagon.getValue(),
                    fldKarbariVagonName: CboKarbariVagon.getDisplayValue(),
                   /* fldMalek_InfoId: fldMalek_InfoId.getValue(),
                    fldNameCompany: txtMalekVagon.getValue(),*/
                    fldTimeStamp: fldTimeStamp,
                    __RequestVerificationToken: App.NewVagon.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {
                    chat.server.reloadLog();
                    if (data.Er == 1 && data.Change == 1) {/*vaghti TimeStamp==0*/
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.WARNING,
                            buttons: Ext.MessageBox.OK,
                            fn: function (btn) {
                                if (btn == 'ok') {
                                    LoadVagon();
                                }
                            }
                        });
                    }
                    else if (data.Er == 1 && data.Change == 2) {/*vaghti TimeStamp==2*/
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK,
                            fn: function (btn) {
                                if (btn == 'ok') {
                                    App.NewVagon.destroy();
                                }
                            }
                        });

                    }
                    else if (data.Er == 1) {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK,
                        });
                    }
                    else {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.INFO,
                            buttons: Ext.MessageBox.OK,
                        });
                    }
                    App.Vagon.queryById('GridVagon').store.load();
                    if (data.Er != 1)
                        ClearVagon();
                    App.NewVagon.body.mask().hide();
                }

            });
        }
    function ClearVagon() {

        App.NewVagon.queryById('txtShomare').setValue("");
        App.NewVagon.queryById('txtVaznKhali').setValue("");
        App.NewVagon.queryById('txtToolVagon').setValue("");
        /*App.NewVagon.queryById('txtMalekVagon').setValue("");
        App.NewVagon.queryById('fldMalek_InfoId').setValue(0);*/
        App.NewVagon.queryById('CboTypeVagon').setValue("");
        App.NewVagon.queryById('CboKarbariVagon').setValue("1");
        App.NewVagon.queryById('fldId').setValue(0);
    }
    var addKeyMapVagon = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.NewVagon.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "CboKarbariVagon") {
                        nextfld = App.NewVagon.queryById('btnSaveVagon');
                        SaveVagon();
                        return;
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>
