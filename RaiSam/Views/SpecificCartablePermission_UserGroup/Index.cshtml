@model IEnumerable<RaiSam.Models.SpecificCartablePermissionTree>
@using RaiSam.Models
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
    var perr = false;
    var perr2 = false;
    if (RaiSam.Models.Permission.haveAccess(6,"","0"))
    {
        perr = true;
    }
    if (RaiSam.Models.Permission.haveAccess(10,"","0"))
    {
        perr2 = true;
    }
}

<style>
    .no-leaf-icons .x-tree-icon-leaf {
        display: none !important;
    }

    .custom-EditUserGroup {
        margin-right: 240px !important;
    }

    .indicatormargin {
        margin-left: -5px;
    }

    .x-tree-icon {
        background-size: contain !important;
    }
</style>

@(Html.X().Panel().Listeners(l => l.AfterRender.Handler = "SpecificPermi_UserGroupSetSize()")
        .Border(false)
        .Title("تعیین دسترسی کارتابل تخصصی")
        .Closable(true)
        .CloseAction(Ext.Net.CloseAction.Destroy)
        .ID("SpecificPermi_UserGroup")
    .Items(
        X.AntiForgeryField()
            .ItemID("antiForgeryToken").Listeners(l => l.AfterRender.Handler = "App.TreeSpecificPermi.store.load();setTimeout(function(){App.TreeSpecificPermi.expandAll();},1000);")
            .Hidden(true),
        X.Panel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .Padding(0)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                .TopBar(
                    Html.X().Toolbar()
                        .Items(
                            X.Button()
                                .Text("ذخیره")
                                .Icon(Ext.Net.Icon.Disk)
                                    .Listeners(li => li.Click.Handler = "SaveSpecificPermi_UserGroup();"),
                                X.SplitButton()
                                        .Text("راهنما")
                                        .Icon(Ext.Net.Icon.Help)
                                        .Menu(X.Menu()
                                        .Items(
                                        X.MenuItem()
                                                    .Text("راهنما متنی")
                                                    .Icon(Ext.Net.Icon.TextPaddingTop)
                                                                    .Listeners(l => l.Click.Handler = "HelpSpecificPermi_UserGroup()")
                                                    .ItemID("btnshowHelpDirectorate"),
                                            X.MenuItem()
                                                    .Text("راهنما تصویری")
                                                    .Icon(Ext.Net.Icon.PlayBlue)
                                                            .Listeners(l => l.Click.Handler = "showHelp_VideoSpecificPermi_UserGroup()")

                                    )
                                )
                                )
                    )
            .Items(
                        X.Hidden()
                            .ItemID("fldId"),
                        X.FieldSet()
                            .Padding(0)
                            .Defaults(new { Margin = 2 })
                            .Border(false)
                            .Layout(LayoutType.Table)
                            .LayoutConfig(new TableLayoutConfig { Columns = 1 })
                            .Items(
                            X.FieldSet()
                        .Border(false).Defaults(new { Margin = 2 }).Layout(LayoutType.Table).LayoutConfig(new TableLayoutConfig { Columns = 2 })
                        .Items(
                            X.Label("گروه کاربری:"),
                                    X.ComboBox()
                                            .ItemID("CboGrohKarbari")
                                        .TypeAhead(true)
                                        .Editable(false)
                                        .ForceSelection(true)
                                        .Width(300)
                                        .AutoFocus(true)
                                        .QueryMode(DataLoadMode.Local)
                                        .AllowBlank(false)
                                            .Icon(Icon.Pencil)
                                                .FieldStyle("padding-right:5px;")
                                .IndicatorIcon(Icon.Add)
                                    .IndicatorCls("indicatormargin")
                                .IndicatorTip("جدید")
                                        .BlankText("لطفا گروه کاربری را انتخاب کنید.")
                                        .TriggerAction(TriggerAction.All)
                                            .DisplayField("Name")
                                            .ValueField("ID")
                                        .EmptyText("گروه کاربری...")
                                        .Listeners(l =>
                                            {

                                                l.Select.Handler = "IdUsergroup = 0;App.TreeSpecificPermi.store.load();";
                                                l.AfterRender.Handler = "App.SpecificPermi_UserGroup.queryById('CboGrohKarbari').icon.dom.classList.add('custom-EditUserGroup');";
                                                l.IndicatorIconClick.Handler = "GotoNewUserGroup(0)";
                                                l.IconClick.Handler = "GotoNewUserGroup(1)";
                                            })
                                        .Store(X.Store()
                                            .Listeners(l => { l.Load.Handler = "LoadCboUserGroup()"; })
                                        .Model(X.Model()
                                            .IDProperty("ID")
                                        .Fields(
                                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                            )
                                            )
                                                    .Listeners(l => l.BeforeLoad.Handler = "App.SpecificPermi_UserGroup.queryById('CboGrohKarbari').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.SpecificPermi_UserGroup.queryById('antiForgeryToken').getValue());")
                                .Proxy(Html.X().AjaxProxy()
                                    .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                            .Url(Url.Action("GetUserGroup"))

                                        .Reader(X.JsonReader().Root("data"))
                                            )
                                            )
                    ),
                                X.TreePanel()
                                        .ID("TreeSpecificPermi")
                                            .Cls("no-leaf-icons")
                                    .AutoScroll(true)
                                    .Border(true)
                                    .UseArrows(true)
        //.Expand(true)
                                    .Store(
                                        X.TreeStore()
                                            .Model(
                                                Html.X().Model()
                                                    .Fields(
                                                X.ModelField().Name(Model, m => m.fldNodeId).Type(ModelFieldType.String),
                                            X.ModelField().Name(Model, m => m.fldCartablId).Type(ModelFieldType.String),
                                            X.ModelField().Name(Model, m => m.fldNodeType).Type(ModelFieldType.String),
                                            X.ModelField().Name(Model, m => m.fldNodeName).Type(ModelFieldType.String),
                                            X.ModelField().Name(Model, m => m.fldEffective).Type(ModelFieldType.Boolean),
                                            X.ModelField().Name(Model, m => m.fldStatus).Type(ModelFieldType.Boolean),
                                            X.ModelField().Name(Model, m => m.fldShowSpecific).Type(ModelFieldType.Boolean),
                                            X.ModelField().Name(Model, m => m.fldShowGeneral).Type(ModelFieldType.Boolean)
                                                        )
                                                    )
                                            .Proxy(
                                                Html.X().AjaxProxy()
                                                        .Url(Url.Action("NodeLoadCartabl"))
                                                            .ActionMethods(l => l.Read = HttpMethod.POST)
                                                )
                                            .Listeners(l =>
                                            {
                                                l.BeforeLoad.Fn = "GetParam";
                                                l.Load.Handler = "loadallChild()";
                                            })

                                        )
                                    .ColumnModel(
                                           X.Column().Text("عنوان").DataIndex("fldNodeId").Hidden(true).Flex(1),
                            X.TreeColumn().Text("عنوان").DataIndex("fldNodeName").Wrap(true).Flex(5),
                            X.CheckColumn().Text("مؤثر").DataIndex("fldEffective").Renderer("hidechecked").Editable(false).StopSelection(false).Flex(1),
                            X.CheckColumn().Text("گروهی").DataIndex("fldStatus").Renderer("hidechecked").Editable(false).StopSelection(false).Flex(1),
                            X.CheckColumn().Text("نمایش در کارتابل عمومی").DataIndex("fldShowGeneral").Renderer("hidechecked").Editable(false).StopSelection(false).Flex(1)
                                         )

                                                .Root(Html.X().Node().NodeID("0").AttributesObject(new { fldNodeId = "", fldNodeName = "دسترسی کارتابل تخصصی", fldNodeType = "0", CartablId = "0" })/*.Expanded(true)*/)
                                    )

            )
    )
)
<script type="text/javascript">
    var IdUsergroup='@ViewBag.userGroupId';
    function LoadCboUserGroup() {
        App.SpecificPermi_UserGroup.queryById('CboGrohKarbari').select(App.SpecificPermi_UserGroup.queryById('CboGrohKarbari').store.getAt(0));
    }
    var hidechecked = function (value, metaData, record, rowIndex, colIndex, store) {
        if (record.data.fldNodeType == 4) {
            return Ext.ux.CheckColumn.prototype.renderer.apply(this, arguments);
        }
    };

    function loadallChild() {
        if (App.TreeSpecificPermi.getRootNode().isLoaded()) {
            setTimeout(function () { App.TreeSpecificPermi.expandAll(); }, 500);
        }
    }

    var GetParam = function (store, operation, eOpts) {
        operation.params.nod = operation.node.raw.fldNodeId;
        operation.params.Typee = operation.node.raw.fldNodeType;
        operation.params.CartableIdd = operation.node.raw.cartablId;
        operation.params.__RequestVerificationToken = App.SpecificPermi_UserGroup.queryById('antiForgeryToken').getValue();
        if (IdUsergroup != 0) {
            operation.params.UserGroupId = IdUsergroup;
            operation.params.Level = 0;
        }
        else {
            var CboGrohKarbari = App.SpecificPermi_UserGroup.queryById('CboGrohKarbari');
            operation.params.UserGroupId = CboGrohKarbari.getValue();
            operation.params.Level = 1;
        }
    };

    function showHelp_VideoSpecificPermi_UserGroup() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/SpecificCartablePermission_UserGroup/VideoWinSpecificCartablePer',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }
    function GotoNewUserGroup(valuee) {
        var idusergroup = 0;
        if (valuee == 1) {
            idusergroup = App.SpecificPermi_UserGroup.queryById('CboGrohKarbari').getValue();
        }
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/UserGroup/New',
            params: {
                id: idusergroup,
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }


    function SpecificPermi_UserGroupSetSize() {
        App.SpecificPermi_UserGroup.setSize(App.UserWin.getWidth() - 10, App.UserWin.getHeight() - 85);
        App.SpecificPermi_UserGroup.queryById("TreeSpecificPermi").setHeight(App.UserWin.getHeight() - 160);
        App.SpecificPermi_UserGroup.queryById("TreeSpecificPermi").setWidth(App.UserWin.getWidth() - 160);
    }
    function ChangeCboUserGroup() {

        var GrohKarbari = App.SpecificPermi_UserGroup.queryById('CboGrohKarbari');
        Ext.net.DirectMethod.request({
            url: '/SpecificCartablePermission_UserGroup/NodeLoad',
            params: {
                node: "0",
                UserGroupId: GrohKarbari.getValue()
            },
            success: function () {
                App.TreeSpecificPermi.store.load();
                /* Reload();*/
            },
            failure: function (errorMsg) {
                Ext.Msg.alert('Failure', errorMsg);
            }

        });
        return false;
    }



    function SaveSpecificPermi_UserGroup() {
        var ExistOP = App.TreeSpecificPermi.getRootNode().findChild("fldNodeType", 4, true);
        var GrohKarbari = App.SpecificPermi_UserGroup.queryById('CboGrohKarbari');
        var er = false;
        if (GrohKarbari.validate() == false)
            er = true;
        if (er == true)
            return;
        if (ExistOP != null) {
            var Checked = App.TreeSpecificPermi.getChecked();
            var Permission = new Array();
            App.SpecificPermi_UserGroup.body.mask("در حال ذخیره سازی...");
            for (var i = 0; i < Checked.length ; i++) {
                Permission.push({
                    'fldOperation_ActionId': Checked[i].raw.fldNodeId
                });
            }
            var data = {
                permi1: JSON.stringify(Permission),
                'UserGroupID': GrohKarbari.getValue(),
                __RequestVerificationToken: App.SpecificPermi_UserGroup.queryById('antiForgeryToken').getValue()
            };
            $.ajax({
                type: "POST",
                url: '/SpecificCartablePermission_UserGroup/Save',
                datatype: "json",
                data: data,
                /*contentType: 'application/json',*/
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Er == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.SpecificPermi_UserGroup.body.mask().hide();
                },
                failure: function (data) {
                    alert(data.data);
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا ابتدا اکشن را به کارتابل اختصاص دهید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function HelpSpecificPermi_UserGroup() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/SpecificCartablePermission_UserGroup/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
</script>