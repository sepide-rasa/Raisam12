@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities;
<script src="~/Scripts/jquery-ajax-native.js"></script>
@{
    var X = Html.X();
}


@(Html.X().Window().Modal(true).Listeners(li => li.AfterRender.Handler = "LoadMosavabat();")
.Width(480)//.Height(500)
    .Title("ثبت مصوبات")
             .ID("NewMosavabat")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)

    .Items(
        X.FormPanel().Border(false)
        .Border(false)
        .Margin(10)
        .TitleAlign(Ext.Net.TitleAlign.Center)
            .ButtonAlign(Ext.Net.Alignment.Center)
                    .DefaultButton("btn")
                .TitleAlign(Ext.Net.TitleAlign.Center)
                       .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).ToolTip("کلید میانبر F8").Margin(10)
                                   .Listeners(l =>
                                   {
                                       l.Click.Handler = "SaveMosavabat();";

                                   })
                                   .ItemID("btnSave")
                                    ,
                                    X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                                               .OnClientClick("App.NewMosavabat.destroy()"))
                .Items(

            X.AntiForgeryField()
                    .ItemID("antiForgeryToken").Hidden(true),
                X.Panel().Border(false)

            .Items(
                X.FieldSet().Border(false)
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                .Defaults(new { Margin = 2 })
                .Items(
                X.Hidden().ItemID("fldId")
                ,
                         X.Label("عنوان:"),
                     X.TextField()
                                    .ItemID("txtTitle")
                                    .MaxLength(200)
                            .EnforceMaxLength(true)
                            .AllowBlank(false)
                            .BlankText("لطفا عنوان را وارد کنید.")
                            .MsgTarget(Ext.Net.MessageTarget.Side)
                        ,
                    X.Label().Text("مربوط به:")
                           , X.ComboBox()
                                            .ItemID("cboTypeContract")
                                                .LabelAlign(Ext.Net.LabelAlign.Top)
                                            .LabelAlign(Ext.Net.LabelAlign.Right)
                                            .TypeAhead(true)
                                            .Editable(false)
                                            .QueryMode(DataLoadMode.Local)
                                            .ForceSelection(true)
                                            .TriggerAction(TriggerAction.All)
                                            .DisplayField("Name")
                                            .ValueField("ID")
                                            .Items(
                                                    new ListItem("مسافری", "1"),
                                                        new ListItem("لکوموتیو", "2"),
                                                                new ListItem("باری", "3"),
                                                                new ListItem("خط/خطوط فرعی", "4"),
                                                                    new ListItem("همه موارد", "5")
                                            )
                                            .SelectedItems(new { Value = "1" })
                                            .AllowBlank(false)
                                //    .TypeAhead(true)
                                //    .Editable(false)
                                //    .ForceSelection(true)
                                //    .QueryMode(DataLoadMode.Local)
                                //    .TriggerAction(TriggerAction.All)
                                //    .AllowBlank(false)
                                //    .BlankText("لطفا نوع را انتخاب کنید.")
                                //    .DisplayField("fldName")
                                //    .ValueField("fldId")
                                //    .EmptyText("...")
                                //    .Store(X.Store()
                                //                    .Listeners(l => l.Load.Handler = "setDefaultCboTypeContract();LoadMosavabat();")
                                //        .Model(X.Model()
                                //            .IDProperty("fldId")
                                //            .Fields(
                                //                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                //                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                //                )
                                //        )
                                //                                    .Listeners(l => l.BeforeLoad.Handler = "App.NewMosavabat.queryById('cboTypeContract').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.NewMosavabat.queryById('antiForgeryToken').getValue());")
                                //            .Proxy(Html.X().AjaxProxy()
                                //                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                //            .Timeout(200000000)
                                //                    .Url(Url.Action("GetTypeContract"))
                                //            .Reader(X.JsonReader().Root("data"))
                                //        )
                                //)
                        
                            , X.FieldSet().ColSpan(4)
                    .Title("آپلود مدارک در قالب pdf و word")
                        .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
        // .Width(400)
                            .Defaults(new { Margin = 2 })
                .Items(
                            X.FileUploadField()
                                .FieldStyle("direction:ltr;")
                            .ID("FileUploadField1")
                            .ButtonOnly(true).ButtonText("انتخاب فایل")
                            .DirectEvents(l =>
                                    {
                                        l.Change.Action = "Upload";
                                        l.Change.Success = "hideprogressMosavabat();";
                                    })
                            .Listeners(l => l.Change.Fn = "showFile")
                            .Icon(Ext.Net.Icon.DiskUpload)
                                , X.Button()
                            .ID("btnDownload")
                            .Text("دانلود فایل")
                            .Icon(Ext.Net.Icon.DiskDownload)
                            .Listeners
                                (l => { l.Click.Handler = "Download();"; }).ColSpan(2)
                                , X.Container().Content(@<center><div id="fi-button-msg" style="display:none; width:210px;height:25px"></div></center>)//.ColSpan(4)
                    )

                        )

                )
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
            )
        )
)
            }))
<script type="text/javascript">

    var fileId = 0;
    var MojazMosavabat = 0;
    var sizeeMosavabat = 0;
    var EndUploadMosavabat = false;

    var CheckMosavabat = setInterval(CheckEndMosavabat, 1000);

    function CheckEndMosavabat() {
        if (EndUploadMosavabat == true) {
            Ext.MessageBox.hide();
            Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
            clearInterval(CheckEndMosavabat);
            EndUploadMosavabat = false;
        }
    }
    var showFile = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msg');
        if (v) {
            showProgressBarMosavabat();
            if (v.split('.').pop().toLowerCase() == "pdf" || v.split('.').pop().toLowerCase() == "docx" || v.split('.').pop().toLowerCase() == "doc") {
                MojazMosavabat = 1;
                if (document.getElementById(id).files[0].size <= 10240000) {
                    sizeeMosavabat = 1;
                }
                if (sizeeMosavabat == 1) {
                    el.update('<b>فایل انتخاب شده:</b> ' + v);
                }
                else {
                    el.update("");
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                el.update("");
            }
        }
    };

    function hideprogressMosavabat() {
        if (MojazMosavabat == 1 && sizeeMosavabat == 1) {
            EndUploadMosavabat = true;
        }
        MojazMosavabat = 0;
        sizeeMosavabat = 0;
    }

    function showProgressBarMosavabat() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }
    function setDefaultCboTypeContract() {
        if ('@ViewBag.Id' == '0')
            App.NewMosavabat.queryById("cboTypeContract").setValue(App.NewMosavabat.queryById("cboTypeContract").store.getAt(0));
    }
    function LoadMosavabat() {
        ReplaceArabic();
        if ('@ViewBag.Id' != '0') {
            Ext.net.DirectMethod.request({
                url: '/Mosavabat/Details',
                params: {
                    Id: '@ViewBag.Id'
                },
                success: function (data) {

                    var txtTitle = App.NewMosavabat.queryById('txtTitle');
                    txtTitle.setValue(data.fldTitle);
                    var cboTypeContract = App.NewMosavabat.queryById('cboTypeContract');
                    cboTypeContract.setValue(data.fldTypeContractId);
                    var Id = App.NewMosavabat.queryById('fldId');
                    Id.setValue(data.fldId);
                    fileId = data.fldFileId;
                }
            });
        }
        else {
            App.NewMosavabat.queryById('txtTitle').validate();
            App.NewMosavabat.queryById('btnDownload').setDisabled(true);

        }

    }
    function Download() {
        if (fileId != 0) {
            /*window.location.href = 'Url.Content("~/Mosavabat/DownloadFile?FileId=")' + fileId;*/
            $.ajax({
                type: "POST",
                dataType: 'native',
                url: "/Mosavabat/DownloadFile",
                xhrFields: {
                    responseType: 'blob'
                },
                data: {
                    FileId: fileId

                },
                success: function (blob) {
                    x = blob;
                    var link = document.createElement('a');
                    link.href = window.URL.createObjectURL(blob);
                    link.download = "DownloadFile";
                    link.click();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "فایل مورد نظر انتخاب نشده است.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function SaveMosavabat() {
        var txtTitle = App.NewMosavabat.queryById('txtTitle');
        var cboTypeContract = App.NewMosavabat.queryById('cboTypeContract');
        var Id = App.NewMosavabat.queryById('fldId');
            var er = false;
            if (txtTitle.validate() == false) {
                er = true;
            }
            if (cboTypeContract.validate() == false) {
                er = true;
            }
            if (er == true)
                return;

            Ext.net.DirectMethod.request({
                url: '/Mosavabat/Save',
                params: {
                    fldId: Id.getValue(),
                    fldTitle: txtTitle.getValue(),
                    fldFileId: fileId,
                    fldTypeContractId: cboTypeContract.getValue()
                },
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1) {
                        Ext.get('fi-button-msg').update("");
                        ic = Ext.MessageBox.ERROR;
                    }

                    Ext.MessageBox.show({
                        Name: data.MsgName,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    App.Mosavabat.queryById('GridMosavabat').store.load();
                    if (data.Err != 1)
                    {
                        ClearMosavabat();
                        fileId = data.FileId;
                        App.NewMosavabat.queryById('btnDownload').setDisabled(false);
                    }

                }

            });
        }
    function ClearMosavabat() {
        App.NewMosavabat.queryById('txtTitle').setValue("");
        App.NewMosavabat.queryById('fldId').setValue(0);
        App.NewMosavabat.queryById('btnDownload').setDisabled(true);
        Ext.get('fi-button-msg').update("");
        fileId = 0;
    }
        function EnterNext() {
            var keyfield = App.NewMosavabat.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
            var nextfld = keyfield.nextSibling().nextSibling();
            nextfld.focus();
            nextfld.selectText();

        }
</script>