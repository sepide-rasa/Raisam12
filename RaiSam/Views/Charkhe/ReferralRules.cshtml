@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@model IEnumerable<RaiSam.Models.prs_tblReferralRulesSelect>

@{
    var X = Html.X();
}

@(Html.X().Window()
    .Modal(true)
    .Listeners(li => { li.AfterRender.Handler = "LoadReferralRules();"; li.Render.Fn = "addKeyMapCharkhe"; })
    .Title("قوانین ارجاع")
    .ID("ReferralRules")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .ButtonAlign(Ext.Net.Alignment.Center)
    .Buttons(
        X.Button()
            .Text("ذخیره")
            .Icon(Ext.Net.Icon.Disk)
            .Listeners(l => l.Click.Handler = "SaveReferralRuls();"),
        X.Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
            .ToolTip("کلید میانبر Esc")
            .OnClientClick("App.ReferralRules.hide();"))
    .Items(
            X.AntiForgeryField()
            .ItemID("antiForgeryToken")
            .Hidden(true),
        X.Panel()
            .Border(false)
            .AutoScroll(true)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                X.FieldSet()
                    .Border(true)
                    .Title("قوانین")
                    .Center()
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 6 })
                    .Defaults(new { Margin = 2 })
                    .Items(
                        X.Hidden().ItemID("fldId"),
                        X.Hidden().ItemID("fldTimeStamp"),
                        X.Label("عنوان اقدام:"),
                        X.ComboBox()
                            .Width(180)
                            .AutoFocus(true)
                            .ItemID("CboAction")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .Editable(true)
                            .TypeAhead(true)
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("ID")
                            .EmptyText("اقدام...")
                            .Listeners(ls => { ls.Change.Handler = " App.ReferralRules.queryById('CboOpration').clearValue();App.ReferralRules.queryById('CboOpration').getStore().load();App.ReferralRules.queryById('CboActionNext').clearValue();App.ReferralRules.queryById('CboActionNext').getStore().load();"; })
                            .Store(
                                X.Store()
                                    .Listeners(l => l.Load.Handler = "setDefaultAction()")
                                    .Model(X.Model()
                                        .IDProperty("ID")
                                        .Fields(
                                            new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                            new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                        )
                                    )
                                        .Listeners(l => l.BeforeLoad.Handler = "App.ReferralRules.queryById('CboAction').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.ReferralRules.queryById('antiForgeryToken').getValue());")
                                .Proxy(Html.X().AjaxProxy()
                                    .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                        .Url(Url.Action("GetAction"))
                                        .Reader(X.JsonReader().Root("data"))
                                    )
                                    .Parameters(ps => ps.Add(new StoreParameter("fldCharkheId", ViewBag.Id, ParameterMode.Raw)))
                            )
                            .AllowBlank(false)
                            .BlankText("لطفا اقدام را انتخاب نمایید."),
                        X.Label("عنوان اکشن:"),
                        X.ComboBox()
                            .ItemID("CboOpration")
                            .Width(180)
                            .EmptyText("اکشن...")
                            .AllowBlank(false)
                            .BlankText("لطفا اکشن را انتخاب نمایید.")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .TypeAhead(true)
                            .Listeners(l => l.Render.Fn = "addTooltipOp")
                            .Editable(true)
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("ID")
                            .Listeners(l => l.Change.Handler = "ChangeOpration();")
                            .Store(
                                X.Store()
                                    .AutoLoad(false)
                                    .Listeners(l => { l.Load.Handler = "setDefaulOpration();"; })
                                    .Model(X.Model()
                                    .IDProperty("ID")
                                    .Fields(
                                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" },
                                        new ModelField("fldOperationId", ModelFieldType.String) { Mapping = "OperationId" })
                                        )
                                        .Listeners(l => l.BeforeLoad.Handler = "App.ReferralRules.queryById('CboOpration').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.ReferralRules.queryById('antiForgeryToken').getValue());")
                                    .Proxy(Html.X().AjaxProxy()
                                        .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                        .Url(Url.Action("GetOpration"))
                                        .Reader(X.JsonReader().Root("data"))
                                    )
                                    .Parameters(ps => ps.Add(new StoreParameter("Charkhe_EghdamId", "App.ReferralRules.queryById('CboAction').getValue()", ParameterMode.Raw)))
                            ),
                        X.Label("خروجی اکشن:")
                            .ItemID("lblValueInt"),
                        X.TextField()
                            .Width(180)
                            .EmptyText("مثال 11.11")
                            .ItemID("txtValueInt")
                            .MaxLength(10)
                            .MaskRe("[1-9,.]")
                            .EnforceMaxLength(true)
                            .AllowBlank(false)
                            .BlankText("لطفا مقدار را وارد کنید."),
                        X.Label("خروجی اکشن:")
                            .ItemID("lblValueStr"),
                        X.TextField()
                            .Width(180)
                            .ItemID("txtValueStr")
                            .MaxLength(50)
                            .EnforceMaxLength(true)
                            .AllowBlank(false)
                            .BlankText("لطفا مقدار را وارد کنید."),
                        X.Label("خروجی اکشن:")
                            .ItemID("lblTarikh"),
                        X.PDateField()
                            .Width(180)
                            .ItemID("txtTarikh")
                            .AllowBlank(false)
                            .MaxLength(10)
                            .BlankText("لطفا تاریخ  را وارد کنید.")
                            .Editable(true)
                            .MaskRe("/[0-9 /]/")
                            .MinLength(10)
                            .EnforceMaxLength(true),
                        X.Label("خروجی اکشن:")
                            .ItemID("lblStatus"),
                        X.ComboBox()
                            .Width(180)
                            .ItemID("CboStatus")
                            .Editable(false)
                            .TypeAhead(true)
                            .BlankText("لطفا وضعیت را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .AllowBlank(false)
                            .EmptyText("وضعیت...")
                            .Items(
                                new ListItem("تایید", "1"),
                                new ListItem("عدم تایید", "0")
                                )
                            .SelectedItems(new { Value = "1" }),
                        X.Label("اولویت ارجاع:")
                            .ItemID("lblOrder"),
                        X.ComboBox()
                            .Width(180)
                            .ItemID("CboOrder")
                            .Editable(false)
                            .TypeAhead(true)
                            .BlankText("لطفا اولویت ارجاع را انتخاب کنید.")
                            .QueryMode(DataLoadMode.Local)
                            .Listeners(l => l.Select.Handler = "hideCboNextAction()")
                            .TriggerAction(TriggerAction.All)
                            .AllowBlank(false)
                            .EmptyText("وضعیت...")
                            .SelectedItems(new { Value = "1" })
                            .Items(
                                new ListItem("اقدام بعدی", "1"),
                                new ListItem("فرمول نویس", "2")//,
        //new ListItem("فرمول ساز", "3")
                                ),
                        X.Label("ارجاع به:")
                            .ItemID("lblActionNext"),
                        X.ComboBox()
                            .ItemID("CboActionNext")
                            .Width(180)
                            .EmptyText("اقدام بعدی...")
                            .LabelAlign(Ext.Net.LabelAlign.Top)
                            .TypeAhead(true)
                            .Editable(true)
                            .QueryMode(DataLoadMode.Local)
                            .ForceSelection(true)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("fldName")
                            .ValueField("ID")
                            .Store(
                                X.Store()
                                    .AutoLoad(false)
                                    .Model(X.Model()
                                    .IDProperty("ID")
                                    .Fields(
                                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                        new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" })
                                    )
                                        .Listeners(l => l.BeforeLoad.Handler = "App.ReferralRules.queryById('CboActionNext').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.ReferralRules.queryById('antiForgeryToken').getValue());")
                                        .Proxy(Html.X().AjaxProxy()
                                            .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                        .Url(Url.Action("GetNextAction"))
                                        .Reader(X.JsonReader().Root("data")))
                                    .Parameters(ps => ps.Add(new StoreParameter("fldCharkheId", ViewBag.Id, ParameterMode.Raw)))
                                    .Parameters(ps => ps.Add(new StoreParameter("EghdamCharkheId", "App.ReferralRules.queryById('CboAction').getValue()", ParameterMode.Raw)))
                            ),
                        X.Label("توضیحات:"),
                        X.TextField()
                            .Width(180)
                            .ItemID("txtDesc")
                     ),
                X.GridPanel()
                    .AutoScroll(true)
                    .Frame(true)
                    .ItemID("GridReferralRules")
                    .BottomBar(X.PagingToolbar())
                    .Features(X.Grouping().EnableGroupingMenu(true).StartCollapsed(false).GroupHeaderTplString("چرخه: " + "{name}"))
                    .TopBar(
                        Html.X().Toolbar()
                            .Items(
                                X.Button()
                                    .Text("ویرایش")
                                    .Icon(Ext.Net.Icon.Pencil)
                                    .Listeners(l => l.Click.Handler = "EditReferralRules()"),
                                X.Button()
                                    .Text("حذف")
                                    .Icon(Ext.Net.Icon.Delete)
                                    .Listeners(l => l.Click.Handler = "DeleteReferralRules()")
                            )
                    )
                    .Store(
                        X.StoreForModel()
                            .GroupField("fldNameCharkhe").GroupDir(Ext.Net.SortDirection.ASC)
                                .Listeners(l => l.BeforeLoad.Handler = "App.ReferralRules.queryById('GridReferralRules').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.ReferralRules.queryById('antiForgeryToken').getValue());")
                                    .Proxy(Html.X().AjaxProxy()
                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                .Url(Url.Action("ReadReferralRules"))
                                .Reader(Html.X().JsonReader().Root("data"))
                                .ExtraParams(ex => ex.Add(new { CharkheId = @ViewBag.Id }))
                            )
                            .PageSize(20)
                            .RemoteFilter(true)
                            .RemotePaging(true)
                            .Listeners(l => l.DataChanged.Handler = "App.ReferralRules.queryById('GridReferralRules').selModel.refresh();")
                    )
                    .ViewConfig(X.GridView().LoadingText("در حال بارگذاری...").RTL(true))
                    .Plugins(X.FilterHeader().Remote(true))
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                        Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                        Html.X().Column().DataIndex(Model, m => m.fldNameAction).Text("عنوان اقدام").Flex(3).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldNameOpertion).Text("عنوان اکشن").Flex(3).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldValue).Text("خروجی اکشن").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldNameNextAction).Text("اقدام بعدی").Flex(3).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldOrderName).Text("اولویت ارجاع").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(5).Wrap(true)
        //, Html.X().ComponentColumn().ID("ColFormulaMakerRef").Flex(2).Component(Html.X().Button().Icon(Icon.Calculator).Text("فرمول ساز")
        // .Listeners(l => l.Click.Handler = "GotoFormulaMakerRef();")).Filterable(false),
        // Html.X().ComponentColumn().ID("ColFormulaWriterRef").Flex(2).Component(Html.X().Button().Icon(Icon.PageWhiteCode).Text("فرمول نویس")
        //     .Listeners(l => l.Click.Handler = "GotoFormulaWriterRef();")).Filterable(false)
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                    )
                )
        )
)
<script type="text/javascript">
    var DataType = 0;
    var EdittFalg = false;
    @*function GotoFormulaMakerRef() {
        var record = App.ColFormulaMakerRef.activeRecord.record;
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Rules/FormulSaz',
            params: {
                /*HeaderId: SelectedRow.data.fldId,
                PayeId: record.data.fldPayeId,
                FormulId: 0,*/
                fldId: record.data.fldId
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }*@

    function hideCboNextAction() {
        if (App.ReferralRules.queryById('CboOrder').getValue() == 1) {
            App.ReferralRules.queryById('CboActionNext').show();
            App.ReferralRules.queryById('lblActionNext').show();
        }
        else {
            App.ReferralRules.queryById('CboActionNext').hide();
            App.ReferralRules.queryById('lblActionNext').hide();
        }
    }

    function DeleteReferralRules() {
        var SelectedHeaderRow = App.ReferralRules.queryById('GridReferralRules').selModel.getLastSelected();
        if (SelectedHeaderRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        App.ReferralRules.body.mask("در حال انجام عملیات...");
                        Ext.net.DirectMethod.request({
                            url: '/Charkhe/DeleteReferralRules',
                            params: {
                                id: SelectedHeaderRow.data.fldId,
                                TimeStamp: SelectedHeaderRow.data.fldTimeStamp,
                                __RequestVerificationToken: App.ReferralRules.queryById('antiForgeryToken').getValue()
                            },
                            success: function (data) {
                                chat.server.reloadLog();
                                if (data.Er == 1 || data.outTimeStamp == 2) {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else if (data.outTimeStamp == 0) {/*تغییر*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.WARNING,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.INFO,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                App.ReferralRules.queryById('GridReferralRules').store.load();
                                App.ReferralRules.body.mask().hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function GotoFormulaWriterRef() {
        var record = App.ColFormulaWriterRef.activeRecord.record;
        openWindowWithPost("/ComputationFormula/Formul", {
            ID: record.data.fldId,
            FieldName: "ReferralRules",
            FormulId: record.data.fldFormulId,
            Name: "فرمول ارجاع"
        });
    }

    function setDefaultAction() {
        App.ReferralRules.queryById('CboAction').select(App.ReferralRules.queryById('CboAction').store.getAt(0));
        App.ReferralRules.queryById('CboOpration').store.load();
    }

    function setDefaulOpration() {
        if (EdittFalg == false) {
            App.ReferralRules.queryById('CboOpration').select(App.ReferralRules.queryById('CboOpration').store.getAt(0));
        }
        else {
            App.ReferralRules.queryById('CboOpration').setValue(String(App.ReferralRules.queryById('GridReferralRules').getSelectionModel().getLastSelected().data.fldOpertion_ActionId));
        }
    }

    function EditReferralRules() {
        var SelectedRow = App.ReferralRules.queryById('GridReferralRules').getSelectionModel().getLastSelected();
        if (SelectedRow != null) {
            EdittFalg = true;
            App.ReferralRules.queryById('fldTimeStamp').setValue(SelectedRow.data.fldTimeStamp);
            App.ReferralRules.queryById('CboAction').setValue(String(SelectedRow.data.fldCharkhe_EghdamId));
            App.ReferralRules.queryById('CboActionNext').setValue(String(SelectedRow.data.fldNextActionId));
            App.ReferralRules.queryById('CboOrder').setValue(String(SelectedRow.data.fldOrder));
            hideCboNextAction();
            App.ReferralRules.queryById('txtDesc').setValue(SelectedRow.data.fldDesc);
            App.ReferralRules.queryById('fldId').setValue(SelectedRow.data.fldId);

            if (App.ReferralRules.queryById('CboStatus').isVisible()) {
                App.ReferralRules.queryById('CboStatus').setValue(SelectedRow.data.fldValue);
            }
            else if (App.ReferralRules.queryById('txtValueStr').isVisible()) {
                App.ReferralRules.queryById('txtValueStr').setValue(SelectedRow.data.fldValue);
            }
            else if (App.ReferralRules.queryById('txtValueInt').isVisible()) {
                App.ReferralRules.queryById('txtValueInt').setValue(SelectedRow.data.fldValue);
            }
            else if (App.ReferralRules.queryById('txtTarikh').isVisible()) {
                App.ReferralRules.queryById('txtTarikh').setRawValue(SelectedRow.data.fldValue);
            }
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    var addTooltipOp = function () {
        this.ComboTooltip = new Ext.ToolTip({
            target: App.ReferralRules.queryById('CboOpration').getEl(),
            html: '',
            mustShow: false,
            listeners: {
                beforeshow: function () {
                    return this.mustShow;
                }
            }
            });
    };

    function ChangeOpration() {
        var CboOpration = App.ReferralRules.queryById('CboOpration');
        var CboActionNext = App.ReferralRules.queryById('CboActionNext');
        var CboStatus = App.ReferralRules.queryById('CboStatus');
        var txtValueStr = App.ReferralRules.queryById('txtValueStr');
        var txtValueInt = App.ReferralRules.queryById('txtValueInt');
        var txtTarikh = App.ReferralRules.queryById('txtTarikh');
        var lblStatus = App.ReferralRules.queryById('lblStatus');
        var lblValueStr = App.ReferralRules.queryById('lblValueStr');
        var lblValueInt = App.ReferralRules.queryById('lblValueInt');
        var lblTarikh = App.ReferralRules.queryById('lblTarikh');
        if (CboOpration.getValue() != "" && CboOpration.getValue() != null) {
            Ext.net.DirectMethod.request({
                url: '/Charkhe/DetailReferralRuls',
                params: {
                    OprationId: CboOpration.findRecordByValue(CboOpration.getValue()).data.fldOperationId,
                    __RequestVerificationToken: App.ReferralRules.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {
                    if (data.tooltip != "") {
                        CboOpration.ComboTooltip.update(data.tooltip);
                        CboOpration.ComboTooltip.mustShow = true;
                        CboOpration.ComboTooltip.show();
                    }
                    else {
                        CboOpration.ComboTooltip.mustShow = false;
                        CboOpration.ComboTooltip.hide();
                    }
                    DataType = data.fldDataTypeId;
                    /*نوع داده رشته*/
                    if (data.fldDataTypeId == 1) {
                        lblValueInt.hide();
                        txtValueInt.hide();
                        lblTarikh.hide();
                        txtTarikh.hide();
                        lblValueStr.show();
                        txtValueStr.show().validate();
                        lblStatus.hide();
                        CboStatus.hide();
                    }
                        /*نوع داده عدد*/
                    else if (data.fldDataTypeId == 2) {
                        lblValueInt.show();
                        txtValueInt.show().validate();
                        lblTarikh.hide();
                        txtTarikh.hide();
                        lblValueStr.hide();
                        txtValueStr.hide();
                        lblStatus.hide();
                        CboStatus.hide();
                    }
                        /*نوع داده تاریخ*/
                    else if (data.fldDataTypeId == 3) {
                        lblValueInt.hide();
                        txtValueInt.hide();
                        lblTarikh.show();
                        txtTarikh.show().validate();
                        lblValueStr.hide();
                        txtValueStr.hide();
                        lblStatus.hide();
                        CboStatus.hide();
                    }
                        /*نوع داده boolean*/
                    else if (data.fldDataTypeId == 4) {
                        lblValueInt.hide();
                        txtValueInt.hide();
                        lblTarikh.hide();
                        txtTarikh.hide();
                        lblValueStr.hide();
                        txtValueStr.hide();
                        lblStatus.show();
                        CboStatus.show().validate();
                    }
                }
            });
        }
    }

    function LoadReferralRules() {
        App.ReferralRules.setWidth(Ext.getBody().getViewSize().width - 200);
        App.ReferralRules.queryById("GridReferralRules").setSize(Ext.getBody().getViewSize().width - 233, Ext.getBody().getViewSize().height - 200);
        var CboStatus = App.ReferralRules.queryById('CboStatus');
        var txtValueStr = App.ReferralRules.queryById('txtValueStr');
        var txtValueInt = App.ReferralRules.queryById('txtValueInt');
        var txtTarikh = App.ReferralRules.queryById('txtTarikh');
        var lblStatus = App.ReferralRules.queryById('lblStatus');
        var lblValueStr = App.ReferralRules.queryById('lblValueStr');
        var lblValueInt = App.ReferralRules.queryById('lblValueInt');
        var lblTarikh = App.ReferralRules.queryById('lblTarikh');
        lblValueInt.hide();
        txtValueInt.hide();
        lblTarikh.hide();
        txtTarikh.hide();
        lblValueStr.hide();
        txtValueStr.hide();
        lblStatus.hide();
        CboStatus.hide();
        App.ReferralRules.queryById('CboActionNext').validate();
    }

    function SaveReferralRuls() {
        var CboOpration = App.ReferralRules.queryById('CboOpration');
        var CboAction = App.ReferralRules.queryById('CboAction');
        var CboActionNext = App.ReferralRules.queryById('CboActionNext');
        var CboStatus = App.ReferralRules.queryById('CboStatus');
        var txtValueStr = App.ReferralRules.queryById('txtValueStr');
        var txtValueInt = App.ReferralRules.queryById('txtValueInt');
        var txtTarikh = App.ReferralRules.queryById('txtTarikh');
        var CboOrder = App.ReferralRules.queryById('CboOrder');
        var txtDesc = App.ReferralRules.queryById('txtDesc');

        var er = false;
        if (CboAction.validate() == false) {
            er = true;
        }
        if (CboActionNext.validate() == false) {
            er = true;
        }
        if (CboOpration.validate() == false) {
            er = true;
        }
        if (CboOrder.validate() == false) {
            er = true;
        }
        if (DataType == 1 && txtValueStr.validate() == false) {
            er = true;
        }
        if (DataType == 2 && txtValueInt.validate() == false) {
            er = true;
        }
        if (DataType == 3 && txtTarikh.validate() == false) {
            er = true;
        }
        if (DataType == 4 && CboStatus.validate() == false) {
            er = true;
        }
        if (er == true)
            return;
        var value = "";
        if (DataType == 1) {
            value = txtValueStr.getValue();
        }
        if (DataType == 2) {
            value = txtValueInt.getValue();
        }
        if (DataType == 3) {
            value = txtTarikh.rawValue;
        }
        if (DataType == 4) {
            value = CboStatus.getValue();
        }
        App.ReferralRules.body.mask("در حال ذخیره سازی...");
        Ext.net.DirectMethod.request({
            url: '/Charkhe/SaveReferralRuls',
            params: {
                fldId: App.ReferralRules.queryById('fldId').getValue(),
                fldCharkhe_EghdamId: CboAction.getValue(),
                fldTimeStamp: App.ReferralRules.queryById('fldTimeStamp').getValue(),
                fldOpertion_ActionId: CboOpration.getValue(),
                fldNameOpertion: CboOpration.getDisplayValue(),
                fldNextActionId: CboActionNext.getValue(),
                fldNameNextAction: CboActionNext.getDisplayValue(),
                fldValue: value,
                fldDesc: txtDesc.getValue(),
                fldOrder: CboOrder.getValue(),
                __RequestVerificationToken: App.ReferralRules.queryById('antiForgeryToken').getValue()
            },
            success: function (data) {
                chat.server.reloadLog();
                EdittFalg = false;
                if (data.Er == 1 || data.TimeStamp == 2) {
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
                else if (data.TimeStamp == 0) {
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: Ext.MessageBox.WARNING,
                        buttons: Ext.MessageBox.OK,
                        fn: function (btn) {
                            if (btn == 'ok') {
                                EditReferralRules();
                            }
                        }
                    });
                }
                else {
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: Ext.MessageBox.INFO,
                        buttons: Ext.MessageBox.OK
                    });
                }
                if (data.Er != 1) {
                    App.ReferralRules.queryById('GridReferralRules').store.load();
                    ClearReferralRuls();
                }
                App.ReferralRules.body.mask().hide();            }
        });
    }

    function ClearReferralRuls() {
        App.ReferralRules.queryById('txtValueInt').setValue("");
        App.ReferralRules.queryById('txtValueStr').setValue("");
        App.ReferralRules.queryById('txtTarikh').setValue("");
        App.ReferralRules.queryById('CboActionNext').setValue("");
        App.ReferralRules.queryById('txtDesc').setValue("");
        App.ReferralRules.queryById('fldId').setValue(0);
        App.ReferralRules.queryById('fldTimeStamp').setValue(0);
    }

    var addKeyMapCharkhe = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.ReferralRules.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtDesc") {
                        SaveReferralRuls();
                        return;
                    }
                    else if (keyfield.itemId == "CboOpration") {
                        if (App.ReferralRules.queryById("txtValueInt").isVisible()) {
                            nextfld = App.ReferralRules.queryById("txtValueInt");
                        }
                        else if (App.ReferralRules.queryById("txtValueStr").isVisible()) {
                            nextfld = App.ReferralRules.queryById("txtValueStr");
                        }
                        else if (App.ReferralRules.queryById("txtTarikh").isVisible()) {
                            nextfld = App.ReferralRules.queryById("txtTarikh");
                        }
                        else if (App.ReferralRules.queryById("CboStatus").isVisible()) {
                            nextfld = App.ReferralRules.queryById("CboStatus");
                        }
                    }
                    else if (keyfield.itemId == "txtValueInt" || keyfield.itemId == "txtValueStr" ||keyfield.itemId == "txtTarikh" ||keyfield.itemId == "CboStatus") {
                        nextfld = App.ReferralRules.queryById("CboOrder");
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>