@model IEnumerable<RaiSam.Models.prs_tblTransactionTypeSelect>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{

    var X = Html.X();
}

<script>
    var ShowIcon_TransType = function (value, record) {
        if (value == null) {
            return "";
        }
        else {
            pic = "data:image/png;base64," + value;
            var template = "<img src=" + pic + " style='width:17px;height:17px;' />";
            return template;
        }
    };
</script>

@(X.Panel().Border(false).Listeners(li => { li.AfterRender.Handler = "TransactionTypeSetSize();"; })
.Title("نوع تراکنش ها")
          .ID("TransactionType")
            .Closable(true)
            .AutoScroll(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                 X.AntiForgeryField()
                .ItemID("antiForgeryToken")
                .Hidden(true),
                X.Panel()
                    .Border(false)
                .AutoScroll(true)
                .Layout(Ext.Net.LayoutType.VBox)
                .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
                .Items(
                    X.GridPanel().AutoScroll(true)
                        .TopBar(
                        Html.X().Toolbar()
                        .Items(
                            X.Button().Text("جدید").Icon(Ext.Net.Icon.Add)
                                         .Listeners(li => li.Click.Handler = "NewTransactionType();"),
                            X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
                                         .Listeners(Li => Li.Click.Handler = "EditTransactionType();"),
                            X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                                .Listeners(de =>
                                {
                                    de.Click.Handler = "DeleteTransactionType();";
                                })
        //,X.SplitButton()
        //        .Text("راهنما")
        //        .Icon(Ext.Net.Icon.Help)
        //        .Menu(X.Menu()
        //        .Items(
        //        X.MenuItem()
        //                    .Text("راهنما متنی")
        //                    .Icon(Ext.Net.Icon.TextPaddingTop)
        //                        .Listeners(l => l.Click.Handler = "HelpTransactionType()"),
        //            X.MenuItem()
        //                    .Text("راهنما تصویری")
        //                    .Icon(Ext.Net.Icon.PlayBlue)
        //                        .Listeners(l => l.Click.Handler = "showHelp_VideoTransactionType()")

                            //    )
        //)
                        )
                    )
                            .ItemID("GridTransactionType")
                    .BottomBar(X.PagingToolbar())
                    .Store(
                        X.StoreForModel()
                            .Listeners(l => l.BeforeLoad.Handler = "App.TransactionType.queryById('GridTransactionType').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.TransactionType.queryById('antiForgeryToken').getValue());")
                            .Proxy(Html.X().AjaxProxy()
                            .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                            .Url(Url.Action("Read"))
                            .Reader(Html.X().JsonReader().Root("data"))

                        )
                        .PageSize(20)
                        .RemoteFilter(true)
                        .RemotePaging(true)
                        .Listeners(l => l.DataChanged.Handler = "App.TransactionType.queryById('GridTransactionType').selModel.refresh();")
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .Plugins(X.FilterHeader().Remote(true))

                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                            Html.X().Column().DataIndex(Model, m => m.fldFile).Filterable(false).Width(50).Renderer("ShowIcon_TransType").Align(Ext.Net.Alignment.Center),
                            Html.X().Column().DataIndex(Model, m => m.fldName).Text("عنوان").Flex(4).Wrap(true),
                            Html.X().Column().DataIndex(Model, m => m.fldNameGroup).Text("گروه تراکنش ها").Flex(10).Wrap(true)
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                    )
            )
        )
)

<script type="text/javascript">

    function showHelp_VideoTransactionType() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/TransactionType/VideoWinTransactionType',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }

    function TransactionTypeSetSize() {
        App.TransactionType.setWidth(App.EventsWin.getWidth());
        var grid = App.TransactionType.queryById('GridTransactionType');
        grid.setHeight(App.EventsWin.getHeight() - 83);
    }
    function NewTransactionType() {
        App.EventsWin.body.mask("در حال بارگذاری...");
        Ext.net.DirectMethod.request({
            url: '/TransactionType/new',
            params: {
                id: 0
            },
            success: function () {
                App.EventsWin.body.mask().hide();
            }
        });
    }
    function EditTransactionType() {
        var SelectedRow = App.TransactionType.queryById('GridTransactionType').selModel.getLastSelected();

        if (SelectedRow != null) {
            App.EventsWin.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/TransactionType/new',
                params: {
                    id: SelectedRow.data.fldId
                },
                success: function () {
                    App.EventsWin.body.mask().hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function DeleteTransactionType() {
        var SelectedHeaderRow = App.TransactionType.queryById('GridTransactionType').selModel.getLastSelected();
        if (SelectedHeaderRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        App.EventsWin.body.mask("در حال انجام عملیات...");
                        Ext.net.DirectMethod.request({
                            url: '/TransactionType/Delete',
                            params: {
                                id: SelectedHeaderRow.data.fldId,
                                TimeStamp: SelectedHeaderRow.data.fldTimeStamp,
                                __RequestVerificationToken: App.TransactionType.queryById('antiForgeryToken').getValue()
                            },
                            success: function (data) {
                                var ic = Ext.MessageBox.INFO;
                                if (data.Er == 1) {
                                    ic = Ext.MessageBox.ERROR;
                                }
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: ic,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    App.TransactionType.queryById('GridTransactionType').store.load();


                                    App.EventsWin.body.mask().hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function HelpTransactionType() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/TransactionType/HelpTransactionType',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
</script>

