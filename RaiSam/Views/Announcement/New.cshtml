@model IEnumerable<RaiSam.Models.prs_tblHadafSabtNamSelect>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
<script>
    var h;
    var onInitializeToEn = function (htmlEditor) {
        h = htmlEditor;
        htmlEditor.getDoc()[Ext.isGecko ? 'onkeypress' : 'onkeyup'] = function (e) {
            htmlEditor.setValue(FaLangAlert(htmlEditor.getValue()));
        };
    };
</script>
<style>
    #fieldsetforfile legend {
        text-align: right;
        font-family: Tahoma !important;
    }
</style>

@(Html.X().Window()
    .Modal(true)
        .Listeners(li =>
        {
            //li.AfterRender.Handler = "LoadAnnouncement();";
            li.Render.Fn = "addKeyMapNewAnnouncement";
        })
    .Width(830)
    .Title("ثبت اطلاعیه")
    .ID("NewAnnouncement")
    .Closable(true)
    .Resizable(false)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .ButtonAlign(Ext.Net.Alignment.Center)
    .Buttons(
        X.Button()
            .Text("ذخیره")
            .Icon(Ext.Net.Icon.Disk)
            .Listeners(l => l.Click.Handler = "SaveAnnouncement()"),
        X.Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
            .OnClientClick("App.NewAnnouncement.hide()"))
    .Items(
        X.AntiForgeryField()
                .ItemID("antiForgeryToken").Listeners(l => l.AfterRender.Handler = "App.TreeStructureNahi.store.load();setTimeout(function(){App.TreeStructureNahi.expandAll();},1000);")
            .Hidden(true),
        X.FormPanel()
            .Border(false)
            .Layout(LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
            .Items(
                X.Panel()
                    .Border(false)
                    .Layout(Ext.Net.LayoutType.Table)
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 8 })
                    .Defaults(new { Margin = 2 })
                    .Items(
                        X.Hidden().ItemID("fldId").Value(0),
                        X.Label("تاریخ:"),
                        X.PDateField()
                            .ItemID("txtAzTarikh")
                            .Listeners(l => l.AfterRender.Handler = "setDateAzTarikhAnnouncement()")
                            .AllowBlank(false)
                            .BlankText("لطفا تاریخ را وارد کنید.")
                            .Editable(true)
                            .MaskRe("/[0-9/]/")
                            .MaxLength(10)
                            .MinLength(10)
                            .EnforceMaxLength(true)
                            .AutoFocus(true),
                        X.Label("عنوان اطلاعیه:"),
                        X.TextField()
                            .ItemID("txtTitle")
                            .AllowBlank(false)
                            .BlankText("لطفا عنوان اطلاعیه را وارد کنید.")
                            .MaxLength(250)
                            .EnforceMaxLength(true),
                            X.Label("وضعیت:"),
                            X.ComboBox()
                                .ItemID("CboStatus")
                                .Editable(true)
                                .TypeAhead(true)
                                .ForceSelection(true)
                                .EmptyText("وضعیت")
                               // .Listeners(l => l.AfterRender.Handler = "LoadStatus();")
                                .AllowBlank(false)
                                .BlankText("لطفا وضعیت را انتخاب کنید.")
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .Items(
                                    new ListItem("فعال", "1"),
                                    new ListItem("غیرفعال", "0")
                                    ),
                            X.Label("نمایش برای:"),
                            X.ComboBox()
                                .ItemID("CboTypeNamayesh")
                                .Editable(true).ReadOnly(true)
                                .TypeAhead(true)
                                .ForceSelection(true)
                                .EmptyText("..")
                                        .Listeners(l =>
                                        {
                                            l.AfterRender.Handler = "LoadTypeNamayesh()"; //"App.NewAnnouncement.queryById('CboTypeNamayesh').setValue('0')"; 
                                    l.Change.Handler="ChangeTypeNamayesh()";})
                                .AllowBlank(false)
                                .BlankText("لطفا نوع را انتخاب کنید.")
                                .QueryMode(DataLoadMode.Local)
                                .TriggerAction(TriggerAction.All)
                                .Items(
                                    new ListItem("کاربران", "1"),
                                    new ListItem("شرکت ها", "0")
                                        ),
        //Html.X().FieldSet()
        //Html.X().FieldSet()
        //    .Border(false)
        //    .ColSpan(2)
        //    .Defaults(new { Margin = 4 })
        //    .Layout(LayoutType.Table)
        //    .Items(
        //        Html.X().Checkbox().ItemID("MamoorinMovazaf"),
        //            Html.X().Label("مشاهده توسط مأمورین موظف").ItemID("lblMamoorinMovazaf")
        //    ),
                        X.TreePanel()
                            .ID("TreeStructureNahi")
                            .AutoScroll(true)
                            .ColSpan(8)
                            .Height(100)
                            .Width(800)
                            .UseArrows(true)
                            .Border(true)
                            .Store(
                                Html.X().TreeStore()
                                    .Listeners(l => l.Load.Fn = "setCheckedParentAnn")
                                    .Proxy(
                                            Html.X().AjaxProxy().Url(Url.Action("NodeLoadTreeStructure"))
                                                        .ActionMethods(l => l.Read = HttpMethod.POST)
                                    )
                                    .Listeners(l => l.BeforeLoad.Fn = "GetParamTreeAnnouncement")
                                )
                            .Listeners(a =>
                            {
                                //a.ItemClick.Handler = "GetTreeStructureId(record);";
                                a.AfterRender.Handler = "this.expandAll();";//"this.getRootNode().expand();";
                                a.CheckChange.Fn = "GetGroupIdAnnouncement";
                            })
                                .Root(Html.X().Node().NodeID("1").Text("راه آهن جمهوری اسلامی ایران").Checked(false).EmptyChildren(true)
                            ),
                             X.GridPanel()
                                 .ColSpan(8)
                                .Height(100)
                                .Width(800).HideHeaders(true)
                    .AutoScroll(true)
                    .Border(true)
                    .ItemID("GridHadafGrouping")
                           .Store(
                            X.StoreForModel()
                                    .RemoteFilter(true)
                                .PageSize(40)
                                    )
                      //  .Plugins(X.FilterHeader().Remote(false))
                        .SelectionModel(
                            Html.X().CheckboxSelectionModel().PruneRemoved(false).ShowHeaderCheckbox(false)
                                .Mode(SelectionMode.Multi).CheckOnly(true))
                        .ColumnModel(
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                                    Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("عنوان").Flex(6).Wrap(true)
                )  
                ,
                        X.FieldSet()
                            .Border(true)
                            .AutoScroll(true)
                            .ColSpan(8)
                            .Title("انتخاب فایل(حداکثر حجم مجاز: 1MB)")
                            .ID("fieldsetforfile")
                            .Layout(LayoutType.HBox)
                            .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Stretch })
                            .Items(
                                X.FormPanel()
                                    .Border(false)
                                    .Width(500)
                                    .Layout(LayoutType.HBox)
                                    .ItemID("fieldsetShowFile")
                                    .LayoutConfig(new HBoxLayoutConfig { Align = HBoxAlign.Middle })
        //.Listeners(l => l.AfterRender.Handler = "App.NewHuman.queryById('fieldsetShowFile').setWidth(App.BasicInfWin.getWidth() - 1050)")
                                    .Items(
                                        X.FileUploadField()
                                            .MarginSpec("0 10px 10px 0")
                                            .Icon(Ext.Net.Icon.DiskUpload)
                                            .ButtonOnly(true)
                                            .ButtonText("انتخاب فایل")
                                            .DirectEvents(l =>
                                            {
                                                l.Change.Action = "Upload";
                                                l.Change.Success = "hideprogressAnnouncement";
                                            })
                                            .Listeners(l => l.Change.Fn = "showFileAnnouncement"),
                                        X.Container()
                                            .Content(@<div id="fi-button-msg" style="width:570px;text-align:right;"><b>فایل انتخاب شده:</b></div>)
                                        )
                            ),
                        X.HtmlEditor()
                            .ItemID("txtMatn")
                            .ColSpan(8)
                            .Width(800)
                            .Height(250)
                            .RTL(true)
                            .EnableSourceEdit(false)
                        )
            )
        )
)
<script type="text/javascript">
    function LoadTypeNamayesh() {

        App.NewAnnouncement.queryById('CboTypeNamayesh').setValue('@ViewBag.TypeNamayesh');

    }
    function ChangeTypeNamayesh() {
        var CboTypeNamayesh = App.NewAnnouncement.queryById('CboTypeNamayesh');
        var GridHadafGrouping = App.NewAnnouncement.queryById('GridHadafGrouping');
        if (CboTypeNamayesh.getValue() == "0") {
            App.TreeStructureNahi.hide();
            GridHadafGrouping.show();
        }
        else {
            GridHadafGrouping.hide();
            App.TreeStructureNahi.show();
        }
    }
    var MojazAnnouncement = 0;
    var sizeeAnnouncement = 0;
    var EndUploadAnnouncement = false;

    var setCheckedParentAnn = function (tree, parent, child) {
        var ExistChecked = child.filter(function (el) { return el.raw.checked == true; });
        if (ExistChecked.length > 0) {
            var node = child[0];
            while (node.parentNode != null) {
                node.parentNode.set('checked', true);
                node = node.parentNode;
            }
        }
    };

    var CheckAnnouncement = setInterval(CheckEndAnnouncement, 500);

    function CheckEndAnnouncement() {
        if (EndUploadAnnouncement == true) {
            Ext.MessageBox.hide();
            Ext.Msg.alert('عملیات موفق', 'فایل با موفقیت آپلود شد.');
            clearInterval(CheckEndAnnouncement);
            EndUploadAnnouncement = false;
        }
    }

    var GetGroupIdAnnouncement = function (node, checked, eOpts) {
        if (node.childNodes.length > 0) {
            node.cascadeBy(function (n) {
                n.set('checked', checked);
            });
            if (checked == true) {
                while (node.parentNode != null) {
                    node.parentNode.set('checked', true);
                    node = node.parentNode;
                }
            }
            else {
                var StateEqual = true;
                while (node.parentNode != null) {
                    node.parentNode.cascadeBy(function (n) {
                        if (n != node.parentNode) {
                            if (n.get('checked') == true) {
                                StateEqual = false;
                            }
                        }
                    });
                    if (StateEqual == true) {
                        node.parentNode.set('checked', false);
                    }
                    node = node.parentNode;
                }
            }
        }
        else {
            if (checked == true) {
                while (node.parentNode != null) {
                    node.parentNode.set('checked', true);
                    node = node.parentNode;
                }
            }
            else {
                var StateEqual = true;
                node.parentNode.cascadeBy(function (n) {
                    if (n != node.parentNode) {
                        if (n.get('checked') != checked) {
                            StateEqual = false;
                        }
                    }
                });
                if (StateEqual != checked) {
                    node.parentNode.set('checked', checked);
                }

                var StateEqual2 = true;
                while (node.parentNode != null) {
                    node.parentNode.cascadeBy(function (n) {
                        if (n != node.parentNode) {
                            if (n.get('checked') == true) {
                                StateEqual2 = false;
                            }
                        }
                    });
                    if (StateEqual2 == true) {
                        node.parentNode.set('checked', false);
                    }
                    node = node.parentNode;
                }
            }
        }
    };

    function setDateAzTarikhAnnouncement() {
        if ('@ViewBag.Id' == '0') {
            var txtAzTarikh = App.NewAnnouncement.queryById('txtAzTarikh');
            var Mindate = '@ViewBag.Tarikh';
            txtAzTarikh.setMinValue(Mindate);
            txtAzTarikh.minText = "تاریخ اطلاعیه نمی تواند قبل از تاریخ روز باشد.";
        }
    }

    var hideprogressAnnouncement = function (Responsdtxt, ResponseObj) {
        if (ResponseObj.IsValid == true) {
            EndUploadAnnouncement = true;
        }
        else {
            var el = Ext.get('fi-button-msg');
            clearInterval(CheckEndAnnouncement);
            EndUploadAnnouncement = false;
            el.update('<b>فایل انتخاب شده:</b> ');
            Ext.MessageBox.show({
                title: "خطا",
                msg: ResponseObj.Message,
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        /*if (MojazAnnouncement == 1 && sizeeAnnouncement == 1) {
            EndUploadAnnouncement = true;
        }*/
        MojazAnnouncement = 0;
        sizeeAnnouncement = 0;
    };

    var showFileAnnouncement = function (fb, v) {
        var id = fb.fileInputEl.dom.id;
        var el = Ext.get('fi-button-msg');
        if (v) {
            showProgressBarAnnouncement();
            if (v.split('.').pop().toLowerCase() == "jpg" || v.split('.').pop().toLowerCase() == "png" || v.split('.').pop().toLowerCase() == "jpeg" ||
                v.split('.').pop().toLowerCase() == "tif" || v.split('.').pop().toLowerCase() == "tiff" || v.split('.').pop().toLowerCase() == "bmp" ||
                v.split('.').pop().toLowerCase() == "xls" || v.split('.').pop().toLowerCase() == "xlsx" || v.split('.').pop().toLowerCase() == "pdf" ||
                v.split('.').pop().toLowerCase() == "doc" || v.split('.').pop().toLowerCase() == "docx" || v.split('.').pop().toLowerCase() == "gif") {
                MojazAnnouncement = 1;
                if (document.getElementById(id).files[0].size <= 1024000) {
                    sizeeAnnouncement = 1;
                }
                if (sizeeAnnouncement == 1) {
                    el.update('<b>فایل انتخاب شده:</b> ' + v);
                }
                else {
                    el.update('<b>فایل انتخاب شده:</b> ');
                }

                if (!el.isVisible()) {
                    el.slideIn('t', {
                        duration: .2,
                        easing: 'easeIn',
                        callback: function () {
                            el.highlight();
                        }
                    });
                } else {
                    el.highlight();
                }
            }
            else {
                el.update('<b>فایل انتخاب شده:</b> ');
            }
        }
    };

    function showProgressBarAnnouncement() {
        Ext.MessageBox.show({
            msg: 'لطفاً منتظر باشید',
            progressText: 'در حال آپلود فایل...',
            width: 300,
            wait: true,
            waitConfig:
            {
                interval: 200,
                text: 'در حال آپلود فایل...',
                scope: this
            }
        });
    }

    var GetParamTreeAnnouncement = function (store, operation, eOpts) {
        var nodeId = operation.node.getId();
        operation.params.nod = nodeId;
        operation.params.Id = '@ViewBag.Id',
        operation.params.__RequestVerificationToken = App.NewAnnouncement.queryById('antiForgeryToken').getValue();
    };

    setTimeout("LoadAnnouncement()", 1000);
    function LoadAnnouncement() {
        if ('@ViewBag.Id' != '0') {
            App.NewAnnouncement.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/Announcement/Details',
                params: {
                    Id: '@ViewBag.Id',
                    __RequestVerificationToken: App.NewAnnouncement.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {
                    var Id = App.NewAnnouncement.queryById('fldId');
                    Id.setValue(data.fldId);

                    var txtTitle = App.NewAnnouncement.queryById('txtTitle');
                    txtTitle.setValue(data.fldTitle);

                    var txtMatn = App.NewAnnouncement.queryById('txtMatn');
                    txtMatn.setValue(data.fldMatn);

                    var txtAzTarikh = App.NewAnnouncement.queryById('txtAzTarikh');
                    txtAzTarikh.setRawValue(data.fldTarikhShamsi);

                    var CboStatus = App.NewAnnouncement.queryById('CboStatus');
                    CboStatus.setValue(data.fldStatus);


                    /* var MamoorinMovazaf = App.NewAnnouncement.queryById('MamoorinMovazaf');
                     MamoorinMovazaf.setValue(data.fldSeenMovazaf);*/

                    var CboTypeNamayesh = App.NewAnnouncement.queryById('CboTypeNamayesh');
                    CboTypeNamayesh.setValue(data.TypeNamayesh);

                    /*Ext.net.DirectMethod.request({
                        url: '/Announcement/GetTreeNahi',
                        params: {
                            Id: 'ViewBag.Id'
                        },
                        success: function (data) {
                            var ChildTree = data.treeId.split(';');
                            var ChildPath = data.path.split(';');
                            var j = 0;
                            for (var i = 0; i < ChildPath.length - 1; i++) {
                                var idd = ChildPath[i].split('/')[2];
                                App.TreeStructureNahi.store.getNodeById(idd).expand();
                                /*if (i != ChildPath.length - 2) {*/
                    /*App.TreeStructureNahi.store.on('expand', function () {
                        var record = App.TreeStructureNahi.store.getNodeById(ChildTree[j]);
                        if (record != undefined) {
                            record.set("checked", true);
                            j++;
                        }
                    });*/
                    /*}*/
                    /*}
                    if (data.IsSetadi == 1) {
                        var record = App.TreeStructureNahi.store.getNodeById(1);
                        record.set("checked", true);
                    }
               }
        });*/
                    App.NewAnnouncement.body.mask().hide();
                }
            });
        }
        else {
            App.NewAnnouncement.queryById('txtTitle').validate();
            App.NewAnnouncement.queryById('txtAzTarikh').validate();
            var GridHadafGrouping = App.NewAnnouncement.queryById('GridHadafGrouping');
            /* App.TreeStructureNahi.hide();
             GridHadafGrouping.show();*/
            Ext.net.Mask.hide();
        }

        Ext.net.DirectMethod.request({
            url: '/Announcement/LoadAllData',
            params: {
                AnnouncementId: '@ViewBag.Id'
            },
            success: function (result) {
                var store = App.NewAnnouncement.queryById("GridHadafGrouping").store;
                store.load({ start: 0, limit: store.count(), page: 1 });
                store.loadData(result.data);

                if (result.checkId.length != 0) {

                    for (var j = 0; j < result.checkId.length; j++) {
                        var index = App.NewAnnouncement.queryById('GridHadafGrouping').getStore().findExact("fldId", result.checkId[j]);
                        App.NewAnnouncement.queryById('GridHadafGrouping').getSelectionModel().select(index, true);
                    }
                }
                Ext.net.Mask.hide();
            }
        });
    }

    function SaveAnnouncement() {
        var txtMatn = App.NewAnnouncement.queryById('txtMatn');
        var txtTitle = App.NewAnnouncement.queryById('txtTitle');
        var txtAzTarikh = App.NewAnnouncement.queryById('txtAzTarikh');
        var CboStatus = App.NewAnnouncement.queryById('CboStatus');
        /* var MamoorinMovazaf = App.NewAnnouncement.queryById('MamoorinMovazaf');*/
        var CboTypeNamayesh = App.NewAnnouncement.queryById('CboTypeNamayesh');
        var Id = App.NewAnnouncement.queryById('fldId');
        var SelRows = App.NewAnnouncement.queryById('GridHadafGrouping').getSelectionModel().getSelection();
        var HadafIds = "";

        var StationIdArray = new Array();

        var er = false;
        if (txtTitle.validate() == false) {
            er = true;
        }
        if (txtAzTarikh.validate() == false) {
            er = true;
        }
        if (CboStatus.validate() == false) {
            er = true;
        }
        if (er == true)
            return;

        if (Ext.util.Format.trim(txtMatn.getEditorBody().textContent) == "") {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا متن اطلاعیه را وارد کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
            return;
        }
        else if (CboTypeNamayesh.getValue() == "1") {
            if (App.TreeStructureNahi.getChecked().length == 0) {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا حداقل یک موقعیت از ساختار درختی را انتخاب نمایید..",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                return;
            }
            else {
                for (var i = 0; i < App.TreeStructureNahi.getChecked().length; i++) {
                    if (App.TreeStructureNahi.getChecked()[i].data.leaf) {
                        StationIdArray.push(App.TreeStructureNahi.getChecked()[i].data.id.split(";")[1]);
                    }
                }
            }
        }
        else if (CboTypeNamayesh.getValue() == "0") {
            if (SelRows.length == 0) {
                Ext.MessageBox.show({
                    title: "خطا",
                    msg: "لطفا حداقل یک هدف ثبت نام را انتخاب نمایید..",
                    icon: Ext.MessageBox.ERROR,
                    buttons: Ext.MessageBox.OK
                });
                return;
            }
            else {
                for (var i = 0; i < SelRows.length; i++) {
                    HadafIds = HadafIds + SelRows[i].data.fldId + ",";
                }
            }
        }





        var Status = true;
        if (CboStatus.getValue() == "0") {
            Status = false;
        }

        var data1 = {
            fldID: Id.getValue(),
            fldMatn: encodeURI(txtMatn.getValue()),
            fldTitle: txtTitle.getValue(),
            fldStatus: Status,
            fldTarikhShamsi: txtAzTarikh.getRawValue(),
            fldSeenMovazaf: false/* MamoorinMovazaf.getValue()*/
        };
        App.NewAnnouncement.body.mask("در حال ذخیره سازی...");
        $.ajax({
            type: "POST",
            url: '/Announcement/Save',
            /*contentType: "application/json; charset=utf-8",*/
            data: {
                StationIdArray1: JSON.stringify(StationIdArray),
                Announcement1: JSON.stringify(data1),
                __RequestVerificationToken: App.NewAnnouncement.queryById('antiForgeryToken').getValue(),
                HadafIds: HadafIds
            },
            datatype: "json",
            success: function (data) {
                var ic = Ext.MessageBox.INFO;
                if (data.Er == 1)
                    ic = Ext.MessageBox.ERROR;
                Ext.MessageBox.show({
                    title: data.MsgTitle,
                    msg: data.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                App.Announcement.queryById('GridAnnouncement').store.load();
                App.NewAnnouncement.body.mask().hide();
                if (data.Er != 1)
                    ClearAnnouncement();
            },
            failure: function (data) {
                alert(data.data);
            }
        });
    }

    function ClearAnnouncement() {
        App.NewAnnouncement.queryById('txtMatn').setValue("");
        App.NewAnnouncement.queryById('txtTitle').setValue("");
        App.NewAnnouncement.queryById('txtAzTarikh').setRawValue("");
        App.NewAnnouncement.queryById('CboStatus').setValue("1");
        App.NewAnnouncement.queryById('fldId').setValue(0);
        App.NewAnnouncement.queryById('txtAzTarikh').focus();
        var Checked = "";
        for (var i = 0; i < App.TreeStructureNahi.getChecked().length; i++) {
            var Checked = Checked + App.TreeStructureNahi.getChecked()[i].data.id + ";";
        }
        for (var j = 0; j < Checked.split(";").length - 1; j++) {
            {
                App.TreeStructureNahi.store.getNodeById(Checked.split(";")[j]).set("checked", false);
            }
        }
    }

    var addKeyMapNewAnnouncement = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.NewAnnouncement.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtMatn") {
                        SaveAnnouncement();
                        return;
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    };
</script>