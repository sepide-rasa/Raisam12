@model IEnumerable<RaiSam.Models.prs_tblScheduleTitleSelect>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}

@(Html.X().Panel()
    .Border(false)
    .ID("ScheduleTitle_Hadaf")
    .Listeners(l => l.AfterRender.Handler = "setSizePnlScheduleTitle();")
    .Title("زمان بندی در هر هدف")
    .AutoScroll(true)
    .Closable(true)
    .CloseAction(CloseAction.Destroy)
    .Layout(Ext.Net.LayoutType.Fit)
    .ButtonAlign(Ext.Net.Alignment.Center)
    .Buttons(
        X.Button()
            .Text("ذخیره")
            .Icon(Ext.Net.Icon.Disk)
            .ToolTip("کلید میانبر F8")
            .Listeners(l =>
            {
                l.Click.Handler = "SaveScheduleTitle();";

            })
            .ItemID("btnSave")
            , X.Button().Text("راهنما").Icon(Ext.Net.Icon.Help)
                                .Listeners(de =>
                                    {
                                        de.Click.Handler = "HelpScheduleTitle();";
                                    })
                            ,
        X.Button()
            .Text("خروج")
            .Icon(Ext.Net.Icon.DoorOut)
            .ToolTip("کلید میانبر Esc")
            .OnClientClick("App.ScheduleTitle_Hadaf.destroy();"))
    .Items(
        X.FormPanel()
            .Border(false)
            .AutoScroll(true)
            .KeyMap(Html.X().KeyMap()
                .Target("={Ext.isGecko ? Ext.getDoc() : Ext.getBody()}")
                .Binding(b =>
                {
                    b.Add(Html.X().KeyBinding()
                    .KeysString(((int)Ext.Net.KeyCode.F8).ToString())
                    .Handler("SaveScheduleTitle();")
                    );
                }))
            .Layout(Ext.Net.LayoutType.VBox)
            .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
            .Items(
                X.FieldSet()
                    .Border(false)
                    .Layout(LayoutType.Table)
                    .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 2 })
                    .Margin(10)
                    .Items(
                        X.Label()
                            .Text("هدف ثبت نام:"),
                        X.ComboBox()
                            .Editable(false)
                            .ItemID("CboHadaf")
                            .TypeAhead(true)
                            .Width(400)
                            .QueryMode(DataLoadMode.Local)
                            .TriggerAction(TriggerAction.All)
                            .DisplayField("Name")
                            .ValueField("ID")
                            .Listeners(l => l.Select.Handler = "GetChecked2()")
                            .EmptyText("....")
                            .Store(
                                X.Store()
                                    .Listeners(l => l.Load.Handler = "seldefaultValue()")
                                    .Model(X.Model()
                                        .IDProperty("ID")
                                        .Fields(
                                                new ModelField("ID", ModelFieldType.String) { Mapping = "HadafSabtNamID2" },
                                                    new ModelField("Name", ModelFieldType.String) { Mapping = "HadafSabtNamName2" }))
                                        .Proxy(X.AjaxProxy()
                                                .Url(Url.Action("GetHadafSabtNam"))
                                        .Reader(X.JsonReader().Root("data")))
                    )
                ),
                X.GridPanel()
                    .Listeners(l => l.AfterRender.Handler = "setSizeGridScheduleTitle()")
                    .ItemID("GridScheduleTitle_Hadaf")
                    .BottomBar(X.PagingToolbar().HideRefresh(true))
                    .Icon(Icon.Table)
                    .Frame(true)
                    .AutoScroll(true)
                    .Title("زمان بندی")
                    .Store(
                        X.StoreForModel()
                            .RemoteFilter(true)
                                    )
                    .Plugins(X.FilterHeader().Remote(false))
                    .SelectionModel(
                        Html.X().CheckboxSelectionModel().ShowHeaderCheckbox(false)
                            .Mode(SelectionMode.Multi).PruneRemoved(false).CheckOnly(true))
                    .ColumnModel(
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                            Html.X().Column().DataIndex(Model, m => m.fldTitle).Text("زمان بندی").Flex(2).Wrap(true)
            )
      ))
)

<script type="text/javascript">

    var width = Ext.getBody().getViewSize().width;
    var height= Ext.getBody().getViewSize().height;

    function setSizePnlScheduleTitle() {
        App.ScheduleTitle_Hadaf.setHeight(height - 115);
    }

    function setSizeGridScheduleTitle() {
        App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").setSize(width - 200, height - 200);
    }

    function seldefaultValue() {
        var CboHadaf = App.ScheduleTitle_Hadaf.queryById('CboHadaf');
        CboHadaf.select(CboHadaf.store.getAt(0));

        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/ScheduleTitle_Hadaf/LoadAllData',
            params: {
                HadafId: CboHadaf.getValue()
            },
            success: function (result) {
                var store = App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").store;
                store.load({ start: 0, limit: store.count(), page: 1 });
                store.loadData(result.data);

                if (result.checkId2.length != 0) {
                    for (var j = 0; j < result.checkId2.length; j++) {
                        var index2 = App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").getStore().findExact("fldId", result.checkId2[j]);
                        App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").getSelectionModel().select(index2, true);
                    }
                }
                Ext.net.Mask.hide();
            }
        });
    }


    function GetChecked2() {
        App.ScheduleTitle_Hadaf.queryById('GridScheduleTitle_Hadaf').getSelectionModel().deselectAll();
        var CboHadaf = App.ScheduleTitle_Hadaf.queryById('CboHadaf');

        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/ScheduleTitle_Hadaf/GetChecked',
            params: {
                HadafId: CboHadaf.getValue()
            },
            success: function (checksId2) {
                if (checksId2.length != 0) {
                    for (var j = 0; j < checksId2.length; j++) {
                        var index = App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").getStore().findExact("fldId", checksId2[j]);
                        App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").getSelectionModel().select(index, true);
                    }
                }
                Ext.net.Mask.hide();
            }
        });
    }

    function SaveScheduleTitle() {
        var CboHadaf = App.ScheduleTitle_Hadaf.queryById('CboHadaf');
        var SelRows2 = App.ScheduleTitle_Hadaf.queryById("GridScheduleTitle_Hadaf").getSelectionModel().getSelection();
        var ScheduleTitleIds = "";
        if (SelRows2.length != 0) {
            for (var i = 0; i < SelRows2.length; i++) {
                ScheduleTitleIds = ScheduleTitleIds + SelRows2[i].data.fldId + ",";
            }
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/ScheduleTitle_Hadaf/Save',
                params: {
                    ScheduleTitleIds: ScheduleTitleIds,
                    HadafId: CboHadaf.getValue()
                },
                success: function (data) {
                    var ic = Ext.MessageBox.INFO;
                    if (data.Err == 1)
                        ic = Ext.MessageBox.ERROR;
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: ic,
                        buttons: Ext.MessageBox.OK
                    });
                    if (data.ExistId2 != "") {
                        ExistIdArray2 = data.ExistId2.split('،');
                        for (var k = 0; k < ExistIdArray2.length - 1; k++) {
                            var ind = App.ScheduleTitle_Hadaf.queryById('GridScheduleTitle_Hadaf').getStore().findExact("fldId", parseInt(ExistIdArray2[k]));
                            var record = App.ScheduleTitle_Hadaf.queryById('GridScheduleTitle_Hadaf').getStore().getAt(ind);
                            App.ScheduleTitle_Hadaf.queryById('GridScheduleTitle_Hadaf').getSelectionModel().deselect(record);
                        }
                    }
                    Ext.net.Mask.hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفاً دبیرخانه مرتبط با گروه مشخص شده را انتخاب نمایید .",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    function HelpScheduleTitle() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/ScheduleTitle_Hadaf/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
</script>