@model IEnumerable<RaiSam.Models.prs_tblTicketFormatFileSelect>
@using Ext.Net.MVC;
@{

    var X = Html.X();
}
@using Hogaf.ExtNet.UX

<script>
    var ShowIconFormat = function (value) {
        if (value == null) {
            return "";
        }
        else {
            pic = "data:image/png;base64," + value;
            var template = "<img src=" + pic + " style='width:17px;height:17px;' />";
            return template;
        }
    };
</script>
@(X.Panel().Border(false).Listeners(li => { li.AfterRender.Handler = "FormatSetSize();"; })
        .Title("فرمت های مجاز")
            .ID("Format")
            .Closable(true)
            .AutoScroll(true)
            .CloseAction(Ext.Net.CloseAction.Destroy)
            .Items(
                X.AntiForgeryField()
                .ItemID("antiForgeryToken")
                .Hidden(true),
                X.Panel().Border(false)
                .Border(false)
                .AutoScroll(true)
                .Items(
                    X.GridPanel().AutoScroll(true)
                        .TopBar(
                        Html.X().Toolbar()
                        .Items(
                            X.Button().Text("جدید").Icon(Ext.Net.Icon.Add)
                                                        .Listeners(li => li.Click.Handler = "NewFormat();"),
                            X.Button().Text("ویرایش").Icon(Ext.Net.Icon.Pencil)
                                                        .Listeners(Li => Li.Click.Handler = "EditFormat();"),
                            X.Button().Text("حذف").Icon(Ext.Net.Icon.Delete)
                                .Listeners(de =>
                                {
                                    de.Click.Handler = "DeleteFormat();";
                                }),
                                X.SplitButton()
                                    .Text("راهنما")
                                    .Icon(Ext.Net.Icon.Help)
                                    .Menu(X.Menu()
                                    .Items(
                                    X.MenuItem()
                                                .Text("راهنما متنی")
                                                .Icon(Ext.Net.Icon.TextPaddingTop)
                                                        .Listeners(l => l.Click.Handler = "HelpFormat()"),
                                        X.MenuItem()
                                                .Text("راهنما تصویری")
                                                .Icon(Ext.Net.Icon.PlayBlue)
                                                    .Listeners(l => l.Click.Handler = "showHelp_VideoFormat()")

                                )
                            )
                        )
                    )
                            .ItemID("GridFormat").Flex(2)
                    .BottomBar(X.PagingToolbar())
                    .Store(
                        X.StoreForModel()
                            .Listeners(l => l.BeforeLoad.Handler = "App.Format.queryById('GridFormat').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.Format.queryById('antiForgeryToken').getValue());")
                        .Proxy(Html.X().AjaxProxy()
                            .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                            .Url(Url.Action("Read"))
                            .Reader(Html.X().JsonReader().Root("data"))

                        )
                        .PageSize(20)
                        .RemoteFilter(true)
                        .RemotePaging(true)
                   .Listeners(l => l.DataChanged.Handler = "App.Format.queryById('GridFormat').selModel.refresh();")
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .Plugins(X.FilterHeader().Remote(true))
                         .Listeners(l =>
                         {
                             l.AfterRender.Handler = "var grid = App.Format.queryById('GridFormat');grid.setHeight(App.TicketingWin.getHeight() - 83); ";

                         })
                    .ColumnModel(
                      Html.X().RowNumbererColumn(),
                                    Html.X().Column().DataIndex(Model, m => m.fldTimeStamp).Text("").Hidden(true).Flex(1),
                    Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                            Html.X().Column().DataIndex(Model, m => m.fldIcon).Text("").Filterable(false).Renderer("ShowIconFormat").Flex(1).Align(Ext.Net.Alignment.Center),
                    Html.X().Column().DataIndex(Model, m => m.fldName).Text("عنوان").Wrap(true).Flex(4),
                        Html.X().Column().DataIndex(Model, m => m.fldPassvand).Text("پسوندهای مجاز").Wrap(true).Flex(4)//,
        // Html.X().Column().DataIndex(Model, m => m.fldSize).Text("حداکثر حجم").Wrap(true).Flex(4),
        //  Html.X().Column().DataIndex(Model, m => m.fldDesc).Text("توضیحات").Flex(10)
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                    )
            )
        )
)

<script type="text/javascript">
    var fldTimeStamp = 0;
    function showHelp_VideoFormat() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/TicketFormatFile/VideoWinFormat',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }
    function FormatSetSize() {
        App.Format.setWidth(App.TicketingWin.getWidth());
        var grid = App.Format.queryById('GridFormat');
        grid.setHeight(App.TicketingWin.getHeight() - 83);
        InsertToLog("فرمت های مجاز",2, true);
    }
    function NewFormat() {
        App.TicketingWin.body.mask("در حال بارگذاری...");
        Ext.net.DirectMethod.request({
            url: '/TicketFormatFile/new',
            params: {
                id: 0
            },
            success: function () {
                App.TicketingWin.body.mask().hide();
            }
        });
    }
    function EditFormat() {
        var SelectedRow = App.Format.queryById('GridFormat').selModel.getLastSelected();

        if (SelectedRow != null) {
            App.TicketingWin.body.mask("در حال بارگذاری...");
            Ext.net.DirectMethod.request({
                url: '/TicketFormatFile/new',
                params: {
                    id: SelectedRow.data.fldId
                },
                success: function () {
                    App.TicketingWin.body.mask().hide();
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function DeleteFormat() {
        var SelectedHeaderRow = App.Format.queryById('GridFormat').selModel.getLastSelected();
        if (SelectedHeaderRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        App.TicketingWin.body.mask("در حال انجام عملیات...");
                        Ext.net.DirectMethod.request({
                            url: '/TicketFormatFile/Delete',
                            params: {
                                id: SelectedHeaderRow.data.fldId,
                                TimeStamp: SelectedHeaderRow.data.fldTimeStamp,
                                __RequestVerificationToken: App.Format.queryById('antiForgeryToken').getValue()
                            },
                            success: function (data) {
                                chat.server.reloadLog();
                                if (data.Er == 1 && data.Change == 1) {/*vaghti TimeStamp==0*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.WARNING,
                                        buttons: Ext.MessageBox.OK,
                                        fn: function (btn) {
                                            if (btn == 'ok') {
                                                App.Format.queryById('GridFormat').store.load();
                                            }
                                        }
                                    });
                                }
                                else if (data.Er == 1 && data.Change == 2) {/*vaghti TimeStamp==2*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK,
                                        fn: function (btn) {
                                            if (btn == 'ok') {
                                                App.Format.queryById('GridFormat').store.load();
                                            }
                                        }
                                    });
                                }
                                else if (data.Er == 1) {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.INFO,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    App.Format.queryById('GridFormat').store.load();
                                }
                                App.TicketingWin.body.mask().hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function HelpFormat() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/TicketFormatFile/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
</script>

