@model IEnumerable<RaiSam.Models.prs_SelectVersionInformation>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities;
@{
    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };

    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
@(Html.X().Window()
    .Closable(true)
    .Title("اطلاعات ورژن")
    .ID("DetailVersion")
    .Width(550)
    .Height(365)
    .AutoScroll(true)
    .Modal(true)
    .Resizable(false)
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(LayoutType.VBox)
    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
    .Items(
         X.AntiForgeryField()
        .ItemID("antiForgeryToken")
        .Hidden(true),
        X.FieldSet()
            .Border(false)
            .Layout(LayoutType.Table)
            .Defaults(new { Margin = 2 })
            .LayoutConfig(new TableLayoutConfig { Columns = 2 })
            .Items(
                X.Label("ورژن:"),
                    X.ComboBox()
                        .AutoFocus(true)
                        .ItemID("CboVersion")
                        .EmptyText("ورژن...")
                        .AllowBlank(false)
                        .BlankText("لطفا ورژن را انتخاب نمایید.")
                        .TypeAhead(true)
                        .Editable(false)
                        .QueryMode(DataLoadMode.Local)
                        .ForceSelection(true)
                        .TriggerAction(TriggerAction.All)
                            .DisplayField("Version")
                        .ValueField("ID")
                        .Listeners(l => l.Change.Handler = "LoadGrid()")
                        .Store(
                            X.Store()
                                    .Listeners(l => l.Load.Handler = "setDefaultCboVersion();")
                                .Model(X.Model()
                                    .IDProperty("ID")
                                    .Fields(
                                        new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                        new ModelField("Version", ModelFieldType.String) { Mapping = "Version" }
                                    )
                                )
                                            .Listeners(l => l.BeforeLoad.Handler = "App.DetailVersion.queryById('CboVersion').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.DetailVersion.queryById('antiForgeryToken').getValue());")
                                .Proxy(X.AjaxProxy()
                                    .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                        .Url(Url.Action("GetVersion"))
                                    .Reader(X.JsonReader().Root("data"))
                                )
                        )
                )

          , X.GridPanel().Border(true)
                    .AutoScroll(true)
                        .ItemID("GridDetailVersion")
                    .BottomBar(X.PagingToolbar())
                    .Plugins(X.FilterHeader().Remote(false))
                    .Width(530)
                    .Height(290)
                    .Store(
                        X.StoreForModel().AutoLoad(false)
                                .Listeners(l => l.BeforeLoad.Handler = "App.DetailVersion.queryById('GridDetailVersion').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.DetailVersion.queryById('antiForgeryToken').getValue());")
                                .Listeners(l => l.DataChanged.Handler = "App.DetailVersion.queryById('GridDetailVersion').selModel.refresh();")
                            .Proxy(Html.X().AjaxProxy()
                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                        .Url(Url.Action("ReadDetailVersion"))
                                .Reader(Html.X().JsonReader().Root("data"))
        // .ExtraParams(pa => pa.Add(new { VersionId = ViewBag.VersionId }))
                            )
                            .PageSize(10)
                            .RemoteFilter(false)
                            .RemotePaging(false)
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                        Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
        //Html.X().Column().DataIndex(Model, m => m.fldTypeErjaName).Text("نوع ارجاع").Flex(2).Wrap(true),
        //Html.X().Column().DataIndex(Model, m => m.fldNameErjadahande).Text("ارجاع دهنده").Flex(2).Wrap(true),
        //Html.X().Column().DataIndex(Model, m => m.fldTarikhAnjam).Text("تاریخ انجام").Flex(3).Wrap(true),
        //Html.X().Column().DataIndex(Model, m => m.fldSharhNatije).Text("شرح نتیجه").Flex(8).Wrap(true),
                         Html.X().Column().DataIndex(Model, m => m.fldSharhShow).Text("شرح ورژن").Flex(8).Wrap(true)
                    )
        )
)

<script type="text/javascript">
    function setDefaultCboVersion() {
        var CboVersion = App.DetailVersion.queryById('CboVersion');
        CboVersion.setValue('@ViewBag.VersionId');
        if ('@ViewBag.setReadOnly' == "1") {
            CboVersion.setReadOnly(true);
        }
        else {
            CboVersion.setReadOnly(false);
        }
    }
    function LoadGrid() {
        var CboVersion = App.DetailVersion.queryById('CboVersion');
        App.DetailVersion.queryById('GridDetailVersion').getStore().getProxy().setExtraParam('VersionId', CboVersion.getValue());
        App.DetailVersion.queryById("GridDetailVersion").store.load();
    }

</script>