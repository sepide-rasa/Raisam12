@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@{
    var X = Html.X();
}
<style>
    #fieldsetfileAc legend {
        text-align: right;
        font-family: Tahoma !important;
    }

    #DeleteActionFileimg:hover {
        cursor: pointer;
    }
</style>

@(Html.X().Window().Modal(true)//.Listeners(li => li.AfterRender.Handler = "LoadTitleRatingDynamic();")
.Width(550)//.Height(300)
    .Title("تعریف عناوین مدارک داینامیک جدید")
         .ID("NewTitleRatingDynamic")
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.FormPanel().Border(false)
        .Border(false).ButtonAlign(Ext.Net.Alignment.Center)
            .Margin(10)
            .DefaultButton("btn")
        .TitleAlign(Ext.Net.TitleAlign.Center)
               .Buttons(X.Button().Text("ذخیره").Icon(Ext.Net.Icon.Disk).Margin(10)
                           .Listeners(l =>
                           {
                               l.Click.Handler = "SaveTitleRatingDynamic();";

                           })
                           .ItemID("btnSave")
                            ,
                            X.Button().Text("خروج").Icon(Ext.Net.Icon.DoorOut).ToolTip("کلید میانبر Esc")
                                   .OnClientClick("App.NewTitleRatingDynamic.destroy()"))

                .Items(
                X.Panel().Border(false)

                .Items(
            X.AntiForgeryField()
                    .ItemID("antiForgeryToken").Hidden(true),
                X.FieldSet().Border(false)
                .Center()
                .LayoutConfig(new Ext.Net.TableLayoutConfig { Columns = 4 })
                .Defaults(new { Margin = 2 })
                .Items(
                X.Hidden().ItemID("fldId"),
                 X.Label("عنوان کلی امتیاز:"),
                     X.ComboBox()
                     .ColSpan(3)
                    .Width(400)
                    .LabelAlign(Ext.Net.LabelAlign.Top)
                    .ItemID("CboTitleGeneralRating")
                    .TypeAhead(true)
                    .Editable(false)
                    .QueryMode(DataLoadMode.Local)
                    .BlankText("لطفا عنوان کلی را انتخاب کنید.")
                    .ForceSelection(true)
                    .TriggerAction(TriggerAction.All)
                    .DisplayField("Name")
                    .ValueField("ID")
                    .EmptyText("عنوان ...")
        //.SelectedItems(new { Value = "1" })
                    .Store(X.Store()
                    .Model(X.Model()
                    .IDProperty("fldId")
                    .Fields(
                                new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                        new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                            )
                                )
                    .Proxy(X.AjaxProxy()
                                    .Url(Url.Action("GetTitleGeneralRating"))
                    .Reader(X.JsonReader().Root("data"))
                            )
                                           .Listeners(li => li.Load.Handler = "LoadTitleRatingDynamic();")
                            )
                    .AllowBlank(false)
                    ,
                     X.Label(" عنوان فارسی:"),
                     X.TextField()
                     .ItemID("txtTitleFA")
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                    .AllowBlank(false)
                    .BlankText("لطفا عنوان فارسی را وارد کنید.")
                         .MaxLength(400)
                    .AutoFocus(true)
                    .ColSpan(3)
                    .Width(400),
                     X.Label(" عنوان انگلیسی:"),
                     X.TextField()
                     .ItemID("txtTitleEN")
                    .MsgTarget(Ext.Net.MessageTarget.Side)
                         .MaxLength(450)
                    .AllowBlank(false)
                    .BlankText("لطفا عنوان انگلیسی را وارد کنید.")
                    ,
                    X.Label("نوع فایل:"),
                         X.ComboBox()
                        .LabelAlign(Ext.Net.LabelAlign.Top)
                        .ItemID("CboNoeFile")
                        .TypeAhead(true)
                        .Editable(false)
                        .QueryMode(DataLoadMode.Local)
                        .BlankText("لطفا نوع فایل را انتخاب کنید.")
                        .ForceSelection(true)
                        .TriggerAction(TriggerAction.All)
                        .DisplayField("Name")
                        .ValueField("ID")
                        .EmptyText(" ...")
        //.SelectedItems(new { Value = "1" })
                        .Store(X.Store()
                        .Model(X.Model()
                        .IDProperty("fldId")
                        .Fields(
                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                            new ModelField("Name", ModelFieldType.String) { Mapping = "Name" }
                                )
                                    )
                        .Proxy(X.AjaxProxy()
                                        .Url(Url.Action("GetFormatFile"))
                        .Reader(X.JsonReader().Root("data"))
                                )
                                              
                                )
                        .AllowBlank(false)
                        )

                )
                    .Layout(Ext.Net.LayoutType.VBox)
                    .LayoutConfig(new Ext.Net.VBoxLayoutConfig { Align = Ext.Net.VBoxAlign.Center })
            )
        )
)

<script type="text/javascript">
    var fldTimeStamp = 0;
    function LoadTitleRatingDynamic() {
        if ('@ViewBag.Id' != '0') {
            Ext.net.DirectMethod.request({
                url: '/TitleRatingDynamic/Details',
                params: {
                    Id: '@ViewBag.Id',
                    __RequestVerificationToken: App.NewTitleRatingDynamic.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {
                    var txtTitleFA = App.NewTitleRatingDynamic.queryById('txtTitleFA');
                    txtTitleFA.setValue(data.fldTitleFA);
                    var txtTitleEN = App.NewTitleRatingDynamic.queryById('txtTitleEN');
                    txtTitleEN.setValue(data.fldTitleEN);
                    var CboTitleGeneralRating = App.NewTitleRatingDynamic.queryById('CboTitleGeneralRating');
                    CboTitleGeneralRating.setValue(data.fldGeneralRatingId); 
                    var CboNoeFile = App.NewTitleRatingDynamic.queryById('CboNoeFile');
                    CboNoeFile.setValue(data.fldFormatFileId);
                    var Id = App.NewTitleRatingDynamic.queryById('fldId');
                    Id.setValue(data.fldId);
                    fldTimeStamp = data.fldTimeStamp;
                }
            });
        }
        else {
            App.NewTitleRatingDynamic.queryById('txtTitleFA').validate();
            App.NewTitleRatingDynamic.queryById('txtTitleEN').validate();
            App.NewTitleRatingDynamic.queryById('CboNoeFile').setValue("1");

            Ext.net.DirectMethod.request({
                url: '/TitleRatingDynamic/DetailsTitleGeneralRating',
                success: function (data) {
                    App.NewTitleRatingDynamic.queryById('CboTitleGeneralRating').setValue(data.fldGeneralRatingId);
                }
            });

        }


    }

    function SaveTitleRatingDynamic() {
        var txtTitleFA = App.NewTitleRatingDynamic.queryById('txtTitleFA');
        var txtTitleEN = App.NewTitleRatingDynamic.queryById('txtTitleEN');
        var CboTitleGeneralRating = App.NewTitleRatingDynamic.queryById('CboTitleGeneralRating');
        var CboNoeFile = App.NewTitleRatingDynamic.queryById('CboNoeFile');
        var Id = App.NewTitleRatingDynamic.queryById('fldId');
            var er = false;

            if (txtTitleFA.validate() == false) {
                er = true;
            }
            if (txtTitleEN.validate() == false) {
                er = true;
            }
            if (CboTitleGeneralRating.validate() == false) {
                er = true;
            }
            if (er == true)
                return;

            Ext.net.DirectMethod.request({
                url: '/TitleRatingDynamic/Save',
                params: {
                    fldId: Id.getValue(),
                    fldTitleFA: txtTitleFA.getValue(),
                    fldTitleEN: txtTitleEN.getValue(),
                    fldGeneralRatingId: CboTitleGeneralRating.getValue(),
                    fldFormatFileId: CboNoeFile.getValue(),
                    fldTimeStamp: fldTimeStamp,
                    __RequestVerificationToken: App.NewTitleRatingDynamic.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {
                    chat.server.reloadLog();
                    if (data.Er == 1 && data.Change == 1) {/*vaghti TimeStamp==0*/
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.WARNING,
                            buttons: Ext.MessageBox.OK,
                            fn: function (btn) {
                                if (btn == 'ok') {
                                    LoadTitleRatingDynamic();
                                }
                            }
                        });
                    }
                    else if (data.Er == 1 && data.Change == 2) {/*vaghti TimeStamp==2*/
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK,
                            fn: function (btn) {
                                if (btn == 'ok') {
                                    App.NewTitleRatingDynamic.destroy();
                                }
                            }
                        });

                    }
                    else if (data.Er == 1) {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK,
                        });
                    }
                    else {
                        Ext.MessageBox.show({
                            title: data.MsgTitle,
                            msg: data.Msg,
                            icon: Ext.MessageBox.INFO,
                            buttons: Ext.MessageBox.OK,
                        });
                    }

                    App.TitleRatingDynamic.queryById('GridTitleRatingDynamic').store.load();

                    if (data.Er != 1)
                        ClearTitleRatingDynamic();
                    App.NewTitleRatingDynamic.body.mask().hide();
                }

            });
        }
    function ClearTitleRatingDynamic() {
        App.NewTitleRatingDynamic.queryById('txtTitleFA').setValue("");
        App.NewTitleRatingDynamic.queryById('txtTitleEN').setValue("");
        App.NewTitleRatingDynamic.queryById('CboTitleGeneralRating').setValue("");
        App.NewTitleRatingDynamic.queryById('fldId').setValue(0);
    }
        function EnterNext() {
            var keyfield = App.NewTitleRatingDynamic.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
            var nextfld = keyfield.nextSibling();
            nextfld.focus();
            nextfld.selectText();
        }
</script>