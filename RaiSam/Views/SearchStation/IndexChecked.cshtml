@model IEnumerable<RaiSam.Models.prs_tblStationFareeFromBarSelect>
@using Ext.Net.MVC;
@{
    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };


    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
@(Html.X().Window()
    .Width(600)
    .Height(350)
    .Title("لیست ایستگاه ها")
    .ID("SearchStation")
    .Closable(true)
    .Modal(true)
    .Layout(Ext.Net.LayoutType.Fit)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.Panel()
            .Border(false)
            .AutoScroll(true)
            .Layout(Ext.Net.LayoutType.Fit)
            .Items(
                X.GridPanel()
                    .AutoScroll(true)
                    .Border(false)
                    .TopBar(
                        Html.X().Toolbar()
                            .Items(
                                X.Button()
                                    .Text("انتخاب")
                                    .Icon(Ext.Net.Icon.ArrowRedo)
                                    .Listeners(li => li.Click.Handler = "NextSearchStation();")
                                    
                                )
                        )
                    .ItemID("GridSearchStation")
                    .Store(
                        X.StoreForModel()
                            .Listeners(l => l.Load.Handler = "GetCheckedData()")
                            .Proxy(Html.X().AjaxProxy()
                                    .Url(Url.Action("ReadChecked"))
                                    .Reader(Html.X().JsonReader().Root("data"))
                                            .ExtraParams(x => x.Add(new { state = @ViewBag.state }))
                        )
                        .PageSize(20000)
                        .RemoteFilter(false)
                        .RemotePaging(false)
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .Plugins(X.FilterHeader().Remote(false))
                    .ColumnModel(
                                     Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                                                    Html.X().Column().DataIndex(Model, m => m.fldStationCode).Text("کد ایستگاه").Wrap(true).Flex(1),
                                                                Html.X().Column().DataIndex(Model, m => m.fldNameStation_Nahi).Text("نام ایستگاه").Wrap(true).Flex(4),
                                                                Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام خط").Wrap(true).Flex(4)
                    )
        //  .Listeners(a => a.CellDblClick.Handler = "NextSearchStation();")
                    .SelectionModel(
                        Html.X().CheckboxSelectionModel().CheckOnly(true)
        //.Listeners(l =>
        //{
        //    l.Deselect.Fn = "getDeselectData";
        //})
                            .PruneRemoved(false)
                            .Mode(Ext.Net.SelectionMode.Multi)
                    )
            )
        )
)

<script type="text/javascript">
    /*var editMode = false;*/
    /*var deletedata = new Array();*/
   
    function GetCheckedData() {

        var StationId = "";
        if ('@ViewBag.state' == 1)
            StationId = '@ViewBag.Stations';

        var AllRow = StationId.split(',');
        for (var i = 0; i < AllRow.length-1; i++) {
            var index2 = App.SearchStation.queryById("GridSearchStation").getStore().findExact("fldId", parseInt(AllRow[i]));
            App.SearchStation.queryById("GridSearchStation").getSelectionModel().select(index2, true);
        }
    }


    function NextSearchStation() {
        var SelectedRow = App.SearchStation.queryById('GridSearchStation').getSelectionModel().getSelection();
        var StationTitle = "";
        var StationId = "";
        for (var i = 0; i < SelectedRow.length; i++) {

            StationId = StationId + SelectedRow[i].data.fldId + ",";
            StationTitle = StationTitle + SelectedRow[i].data.fldTitle + "،";
        }
        if ('@ViewBag.state' == 1) {
            App.SearchStation.body.mask("در حال ذخیره سازی");
            Ext.net.DirectMethod.request({
                url: '/Contract_Project/SaveStations',
                params: {
                    headerId: '@ViewBag.headerId',
                    StationId: StationId,
                    __RequestVerificationToken: App.contract_project.queryById('antiForgeryToken').getValue()
                },
                success: function (data) {
                    App.SearchStation.body.mask().hide();
                    var scc = Ext.MessageBox.INFO;
                    if (data.Er == 1)
                        scc = Ext.MessageBox.ERROR;

                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: scc,
                        buttons: Ext.MessageBox.OK,
                        fn: function (btn) {
                            if (btn == 'ok') {
                                App.SearchStation.destroy();
                                App.contract_project.queryById('Gridcontract_project').store.load();
                            }
                        }
                    });

                }
            });

        }

    }



</script>