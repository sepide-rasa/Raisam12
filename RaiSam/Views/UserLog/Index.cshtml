@model IEnumerable<RaiSam.Models.prs_UserLogSelect>
@using Ext.Net.MVC;
@using Ext.Net
@using Hogaf.ExtNet.UX
@{

    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };

    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
<style>
    .custom-iconlog {
        margin-right: 124px !important;
    }

    .borderrGK {
        border-radius: 20px;
        border-width: 3px;
    }

    .Unsuccess .x-grid-cell, .x-grid-rowwrap-div {
        background-color: #F8A6A0 !important;
    }

    .redroww .x-grid-cell, .x-grid-rowwrap-div {
        background-color: #F7C0BB !important;
    }

    .yellowroww .x-grid-cell, .x-grid-rowwrap-div {
        background-color: #F7F6BB !important;
    }
</style>

@(X.Panel()
    .Border(false)
    .Listeners(li => { li.AfterRender.Handler = "UserLogSetSize();"; li.BeforeClose.Handler = "OpenedLogForm=false;"; li.Render.Fn = "addKeyMapUserLog"; })
    .Title("ردپای کاربران")
    .ID("UserLog")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Items(
        X.AntiForgeryField()
            .ItemID("antiForgeryToken")
            .Hidden(true),
        X.Panel()
            .Border(false)
            .AutoScroll(true)
            .Items(
                X.Panel()
                    .Title("فیلتر جستجو")
                    .Collapsible(true)
                    .Collapsed(true)
                    .AnimCollapse(true)
                    .Frame(true)
                    .MarginSpec("7px 5px 7px 5px")
                    .TitleAlign(TitleAlign.Right)
                    .Listeners(l =>
                    {
                        l.Collapse.Handler = "setCollapseSize()";
                        l.Expand.Handler = "setExpandSize()";
                    })
                    .Layout(LayoutType.VBox)
                    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                    .Items(
                        X.Panel()
                            .ItemID("pnlSearch")
                            .Layout(LayoutType.Table)
                            .Border(false)
                            .LayoutConfig(new TableLayoutConfig { Columns = 10 })
                            .Padding(10)
                            .Defaults(new { Margin = 2 })
                            .Items(
                                X.Hidden().ItemID("SearchableUserId").Value(0),
                                X.Hidden().ItemID("NameTableHistory"),
                                X.Label().Text("نحوه جستجو:"),
                                X.ComboBox()
                                    .ItemID("CboTypeSearch")
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا نحوه جستجو را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .Listeners(l =>
                                    {
                                        l.AfterRender.Handler = "App.UserLog.queryById('CboTypeSearch').setValue('0');";
                                        l.Change.Handler = "handletypesearch()";
                                    })
                                    .EmptyText("نحوه جستجو...")
                                    .Items(
                                        new ListItem("براساس کاربر", "0"),
                                        new ListItem("براساس جدول", "1")
                                    ),
                                X.Label("از تاریخ:"),
                                X.PDateField()
                                    .ItemID("txtStartDate")
                                    .AllowBlank(true)
                                    .BlankText("لطفا تاریخ شروع را وارد کنید.")
                                    .Listeners(l =>
                                    {
                                        l.Change.Handler = "setDateAzTarikhLog()";
                                        l.AfterRender.Handler = "setMaxValuetxtDate('txtStartDate')";
                                    })
                                    .Editable(true)
                                    .MaskRe("/[0-9 /]/")
                                    .MaxLength(10)
                                    .EnforceMaxLength(true),
                                X.Label("تا تاریخ:"),
                                X.PDateField()
                                    .ItemID("txtEndDate")
                                    .Listeners(l =>
                                    {
                                        l.Change.Handler = "setDateTaTarikhLog()";
                                        l.AfterRender.Handler = "setMaxValuetxtDate('txtEndDate')";
                                    })
                                    .AllowBlank(true)
                                    .BlankText("لطفا تا تاریخ را وارد کنید.")
                                    .Editable(true)
                                    .MaskRe("/[0-9 /]/")
                                    .MaxLength(10)
                                    .EnforceMaxLength(true),
                                X.Label("گروه عملیات:").ItemID("lblTransactionGroup"),
                                X.ComboBox()
                                    .ItemID("CboTransactionGroup")
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا گروه عملیات را انتخاب کنید.")
                                    .Editable(true)
                                    .ForceSelection(true)
                                    .Listeners(l => l.Change.Handler = "if(App.UserLog.queryById('CboTransactionGroup').getValue()=='')" +
                                        "{ App.UserLog.queryById('CboTransactionType').store.removeAll();" +
                                        "App.UserLog.queryById('CboTransactionType').clearValue();App.UserLog.queryById('CboTransactionType').disable();}" +
                                        "else{App.UserLog.queryById('CboTransactionType').enable();App.UserLog.queryById('CboTransactionType').store.load();}")
                                    .QueryMode(DataLoadMode.Local)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldName")
                                    .ValueField("fldId")
                                    .Store(X.Store()
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                                )
                                        )
                                                .Listeners(l => l.BeforeLoad.Handler = "App.UserLog.queryById('CboTransactionGroup').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.UserLog.queryById('antiForgeryToken').getValue());")
                                            .Proxy(Html.X().AjaxProxy()
                                            .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                            .Url(Url.Action("GetTransactionGroup"))
                                            .Reader(X.JsonReader().Root("data"))
                                        )
                                        .Listeners(li => li.Load.Handler = "AddAllTransactionGroup();")
                                    ),
                                X.Label().Text("زیر گروه عملیات:").ItemID("lblTransactionType"),
                                X.ComboBox()
                                    .ItemID("CboTransactionType")
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا زیر گروه عملیات را انتخاب کنید.")
                                    .Listeners(l => l.Change.Handler = "edCboTableName()")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldName")
                                    .ValueField("fldId")
                                    .EmptyText("زیر گروه عملیات...")
                                    .Store(X.Store()
                                        .Listeners(l => l.Load.Handler = "AddAllTransactionType()")
                                        .AutoLoad(false)
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                            )
                                        )
                                                .Listeners(l => l.BeforeLoad.Handler = "App.UserLog.queryById('CboTransactionType').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.UserLog.queryById('antiForgeryToken').getValue());")
                                                .Proxy(Html.X().AjaxProxy()
                                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                            .Url(Url.Action("GetTransactionType"))
                                            .Reader(X.JsonReader().Root("data"))
                                        )
                                        .Parameters(ps => ps.Add(new StoreParameter("TransactionGroupId", "App.UserLog.queryById('CboTransactionGroup').getValue()", ParameterMode.Raw)))
                                    ),
                                X.Label().Text("نام جدول:"),
                                X.ComboBox()
                                    .ItemID("CboTableName")
                                    .TypeAhead(true)
                                    .AllowBlank(false)
                                    .BlankText("لطفا نام جدول را انتخاب کنید.")
                                    .QueryMode(DataLoadMode.Local)
                                    .ForceSelection(true)
                                    .TriggerAction(TriggerAction.All)
                                    .DisplayField("fldName")
                                    .ValueField("fldId")
                                    .EmptyText("نام جدول...")
                                    .Listeners(l => l.AfterRender.Handler = "App.UserLog.queryById('CboTableName').disable();")
                                    .Store(X.Store()
                                        .Listeners(l => l.Load.Handler = "AddAllTableName()")
                                        .AutoLoad(false)
                                        .Model(X.Model()
                                            .IDProperty("fldId")
                                            .Fields(
                                                new ModelField("fldId", ModelFieldType.String) { Mapping = "fldId" },
                                                new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" },
                                                new ModelField("fldEnNameTables", ModelFieldType.String) { Mapping = "fldEnNameTables" }
                                            )
                                        )
                                            .Listeners(l => l.BeforeLoad.Handler = "App.UserLog.queryById('CboTableName').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.UserLog.queryById('antiForgeryToken').getValue());")
                                        .Proxy(Html.X().AjaxProxy()
                                        .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                            .Url(Url.Action("GetTableNames"))
                                            .Reader(X.JsonReader().Root("data"))
                                        )
                                    ),
                                    X.Label().Text("نوع عملیات:").ItemID("lblTypeop"),
                                    X.ComboBox()
                                        .ItemID("CboTypeop")
                                        .TypeAhead(true)
                                        .AllowBlank(false)
                                        .BlankText("لطفا نوع عملیات را انتخاب کنید.")
                                        .QueryMode(DataLoadMode.Local)
                                        .ForceSelection(true)
                                        .TriggerAction(TriggerAction.All)
                                        .Listeners(l => l.AfterRender.Handler = "App.UserLog.queryById('CboTypeop').setValue('0');")
                                        .EmptyText("نوع عملیات...")
                                        .Items(
                                            new ListItem("ذخیره", "1"),
                                            new ListItem("ویرایش", "2"),
                                            new ListItem("حذف", "3"),
                                            new ListItem("همه موارد", "0")
                                        ),
                                    X.Label().Text("نتیجه تراکنش:").ItemID("lblResult"),
                                    X.ComboBox()
                                        .ItemID("CboResult")
                                        .TypeAhead(true)
                                        .AllowBlank(false)
                                        .BlankText("لطفا نتیجه تراکنش را انتخاب کنید.")
                                        .QueryMode(DataLoadMode.Local)
                                        .ForceSelection(true)
                                        .TriggerAction(TriggerAction.All)
                                        .Listeners(l => l.AfterRender.Handler = "App.UserLog.queryById('CboResult').setValue(' ');")
                                        .DisplayField("Name")
                                        .ValueField("ID")
                                        .EmptyText("نتیجه تراکنش...")
                                        .Items(
                                            new ListItem("موفق", "1"),
                                            new ListItem("ناموفق", "0"),
                                            new ListItem("همه موارد", " ")
                                        ),
                                    X.Label("IP:").ItemID("lblIP"),
                                    X.TextField()
                                        .ItemID("txtIP")
                                        .Regex("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")
                                        .MaskRe("/[0-9,.]/")
                                        .AllowBlank(true)
                                        .EmptyText("Example:192.168.1.1")
                                        .MaxLength(15)
                                        .MinLength(7)
                                        .EnforceMaxLength(true)
                                        .BlankText("لطفا IP(های) معتبر را وارد کنید.")
                                        .FieldStyle("direction:ltr"),
                                    X.Label("MAC Address:").ItemID("lblMac"),
                                    X.TextField()
                                        .ItemID("txtMac")
                                        .Regex("^([0-9A-Fa-f]{2}[-]){5}([0-9A-Fa-f]{2})$")
                                        .MaxLength(17)
                                        .MinLength(17)
                                        .EnforceMaxLength(true)
                                        .MaskRe("[0-9,a-z,A-Z,-]")
                                        .Plugins(X.InputMask()
                                            .Mask("AA-AA-AA-AA-AA-AA")
                                            .MaskSymbols(ls =>
                                            {
                                                ls.Add(new MaskSymbol { Name = "A", Regex = "[0-9,a-z,A-Z,-]", Placeholder = "_".ToCharArray()[0] });
                                            }))
                                        .FieldStyle("direction:ltr")
                                        .AllowBlank(true)
                                        .BlankText("لطفا MAC Address مورد نظر را وارد کنید."),
                                    X.Label("نــام کــاربــر:").ItemID("lblSearchableUser"),
                                    X.FieldSet()
                                        .Layout(LayoutType.HBox)
                                        .ItemID("flsSearchableUser")
                                        .Border(false)
                                        .Padding(0)
                                        .Items(
                                            X.TextField()
                                                .ItemID("txtSearchableUser")
                                                .IndicatorIcon(Icon.Decline)
                                                .IndicatorTip("حذف")
                                                .Listeners(l => l.IndicatorIconClick.Handler = "App.UserLog.queryById('SearchableUserId').setValue('0');App.UserLog.queryById('txtSearchableUser').setValue('');")
                                                .AllowBlank(true)
                                                .ReadOnly(true)
                                                .FieldStyle("padding-right:6px;")
                                                .Icon(Icon.UserAdd)
                                                .BlankText("لطفا کاربر مورد نظر را انتخاب کنید.")
                                                .Listeners(l =>
                                                {
                                                    l.SpecialKey.Handler = "SelectTreeUser(e.getKey());";
                                                    l.IconClick.Handler = "GotoTreeUser()";
                                                    l.AfterRender.Handler = "App.UserLog.queryById('txtSearchableUser').icon.dom.classList.add('custom-iconlog');";
                                                }),
                                            X.Checkbox().ItemID("chkSub"),
                                            X.Label("زیر مجموعه ها").MarginSpec("0 3px 0 3px")
                                        ),
                                    X.FieldSet()
                                        .Border(false)
                                        .ItemID("btnsearch")
                                        .ColSpan(10)
                                        .Border(false)
                                        .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
                                        .Listeners(l => l.AfterRender.Handler = "App.UserLog.queryById('btnsearch').setWidth(App.EventsWin.getWidth() - 140)")
                                        .Items(
                                            X.Button()
                                                .Text("جستجو")
                                                .Icon(Ext.Net.Icon.Magnifier)
                                                .Listeners(li => li.Click.Handler = "LoadGridLog();")
                                        )
                            )
                ),
                X.GridPanel()
                    .AutoScroll(true)
        //.TopBar(
        //    Html.X().Toolbar()
        //        .Items(
        //            X.SplitButton()
        //                .Text("راهنما")
        //                .Icon(Ext.Net.Icon.Help)
        //                .Menu(X.Menu()
        //                    .Items(
        //                        X.MenuItem()
        //                            .Text("راهنما متنی")
        //                            .Icon(Ext.Net.Icon.TextPaddingTop)
        //                            .Listeners(l => l.Click.Handler = "HelpUserLog()"),
        //                        X.MenuItem()
        //                            .Text("راهنما تصویری")
        //                            .Icon(Ext.Net.Icon.PlayBlue)
        //                            .Listeners(l => l.Click.Handler = "showHelp_VideoUserLog()")
        //                    )
        //                )
        //        )
        //)
                    .ItemID("GridUserLog")
                    .BottomBar(X.PagingToolbar())
                    .Store(
                        X.StoreForModel()
                            .AutoLoad(false)
                            .PageSize(20)
                            .RemoteFilter(false)
                            .RemotePaging(false)
                            .Listeners(l => l.DataChanged.Handler = "App.UserLog.queryById('GridUserLog').selModel.refresh();")
                    )
                    .View(
                        Html.X().GridView()
                            .LoadingText("در حال بارگذاری...").RTL(true)
                            .Listeners(l => l.AfterRender.Fn = "createTooltipLisUserLog")
                            .GetRowClass(l => l.Fn = "UnsuccessColor")
                    )
                    .Plugins(X.FilterHeader().Remote(false))
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
        //Html.X().Column().DataIndex(Model, m => m.fldCodeEnhesari).Text("کد انحصاری").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldName).Text("نام کاربر").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldFamily).Text("نام خانوادگی").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldCodeMeli).Text("کد ملی").Flex(2),
                        Html.X().Column().DataIndex(Model, m => m.fldTypeName).Text("نوع عملیات").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldFaName).Text("نام جدول").Flex(3).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldStatusName).Text("نتیجه تراکنش").Flex(1).Wrap(true),
        //Html.X().Column().DataIndex(Model, m => m.fldJsonParametr).Text("پارامتر Json").Flex(4).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldIP).Text("IP").Flex(1).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldMACAddress).Text("Mac Address").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldTarikh).Text("تاریخ").Flex(1).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldTime).Text("ساعت").Flex(1).Wrap(true),
                        Html.X().ComponentColumn().Flex(1).ID("ColJson").Listeners(l => l.Bind.Fn = "CheckHaveJsonParam")
                            .Component(Html.X().Button().Text("پارامترها").Listeners(l => l.Click.Handler = "ShowJsonParam()")).Filterable(false)
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                        ),
                X.GridPanel()
                        .AutoScroll(true)
                        .ItemID("GridTableLog")
                        .Hidden(true)
                        .BottomBar(X.PagingToolbar())
                        .View(
                            Html.X().GridView()
                                .LoadingText("در حال بارگذاری...").RTL(true)
                                .GetRowClass(l => l.Fn = "typeIdColor")
                        )
                        .Plugins(X.FilterHeader().Remote(false))
                        .ColumnModel(
                            Html.X().ComponentColumn().Width(70).ID("ColHistoryLogTable")
                                .Component(Html.X().Button().Text("تاریخچه").Listeners(l => l.Click.Handler = "HistoryLogTable()")).Filterable(false)
                        )
                        .SelectionModel(
                            Html.X().RowSelectionModel()
                                .Mode(Ext.Net.SelectionMode.Single)
                        )
            )
        )
)
<script type="text/javascript">
    function setCollapseSize()
    {
        if (App.UserLog.queryById('GridUserLog').isHidden()) {
            App.UserLog.queryById('GridTableLog').setHeight(App.EventsWin.getHeight() - 123);
        }
        else {
            App.UserLog.queryById('GridUserLog').setHeight(App.EventsWin.getHeight() - 123);
        }
    }

    function setExpandSize() {
        if (App.UserLog.queryById('CboTypeSearch').getValue() == '0')
        {
            if (App.UserLog.queryById('GridUserLog').isHidden()) {
                App.UserLog.queryById('GridTableLog').setHeight(App.EventsWin.getHeight() - 230);
            }
            else {
                App.UserLog.queryById('GridUserLog').setHeight(App.EventsWin.getHeight() - 230);
            }
        }
        else {
            if (App.UserLog.queryById('GridUserLog').isHidden()) {
                App.UserLog.queryById('GridTableLog').setHeight(App.EventsWin.getHeight() - 204);
            }
            else {
                App.UserLog.queryById('GridUserLog').setHeight(App.EventsWin.getHeight() - 204);
            }
        }
        App.UserLog.queryById('CboTypeSearch').focus();
    }

    function handletypesearch() {
        if (App.UserLog.queryById('CboTypeSearch').getValue() == "0") {
            App.UserLog.queryById('CboTransactionGroup').show();
            App.UserLog.queryById('lblTransactionGroup').show();
            App.UserLog.queryById('CboTransactionType').show();
            App.UserLog.queryById('lblTransactionType').show();
            App.UserLog.queryById('CboResult').show();
            App.UserLog.queryById('lblResult').show();
            App.UserLog.queryById('txtIP').show();
            App.UserLog.queryById('lblIP').show();
            App.UserLog.queryById('txtMac').show();
            App.UserLog.queryById('lblMac').show();
            App.UserLog.queryById('flsSearchableUser').show();
            App.UserLog.queryById('lblSearchableUser').show();
            App.UserLog.queryById('CboTypeop').hide();
            App.UserLog.queryById('lblTypeop').hide();
            edCboTableName();
            if (App.UserLog.queryById('GridUserLog').isHidden()) {
                App.UserLog.queryById('GridTableLog').setSize(Ext.getBody().getViewSize().width - 15, Ext.getBody().getViewSize().height - 258);
            }
            else {
                App.UserLog.queryById('GridUserLog').setSize(Ext.getBody().getViewSize().width - 15, Ext.getBody().getViewSize().height - 258);
            }
        }
        else {
            App.UserLog.queryById('CboTransactionGroup').hide();
            App.UserLog.queryById('lblTransactionGroup').hide();
            App.UserLog.queryById('CboTransactionType').hide();
            App.UserLog.queryById('lblTransactionType').hide();
            App.UserLog.queryById('CboResult').hide();
            App.UserLog.queryById('lblResult').hide();
            App.UserLog.queryById('txtIP').hide();
            App.UserLog.queryById('lblIP').hide();
            App.UserLog.queryById('txtMac').hide();
            App.UserLog.queryById('lblMac').hide();
            App.UserLog.queryById('flsSearchableUser').hide();
            App.UserLog.queryById('lblSearchableUser').hide();
            App.UserLog.queryById('CboTypeop').show();
            App.UserLog.queryById('lblTypeop').show();
            App.UserLog.queryById('CboTableName').enable();
            App.UserLog.queryById('CboTableName').store.load();
            if (App.UserLog.queryById('GridUserLog').isHidden()) {
                App.UserLog.queryById('GridTableLog').setSize(Ext.getBody().getViewSize().width - 15, Ext.getBody().getViewSize().height - 233);
            }
            else {
                App.UserLog.queryById('GridUserLog').setSize(Ext.getBody().getViewSize().width - 15, Ext.getBody().getViewSize().height - 233);
            }
        }
    }

    var CheckHaveJsonParam = function (columnn, component, record, rowIndex) {
        if (record.data.fldJsonParametr == "") {
            component.disable();
        }
    };

    var UnsuccessColor = function (record, rowIndex, rowParams, store) {
        if (record.data.fldStatus == 0) {
            return "Unsuccess";
        }
    };

    var typeIdColor = function (record, rowIndex, rowParams, store) {
        if (record.data.typeId == 3) {
            return "redroww";
        }
        if (record.data.typeId == 2) {
            return "yellowroww";
        }
    };

    function ShowJsonParam() {
        var JsonParametr = App.ColJson.activeRecord.record.data.fldJsonParametr;
        App.UserLog.body.mask('در حال بارگذاری...');
        Ext.net.DirectMethod.request({
            url: '/UserLog/ShowJsonParam',
            params: {
                JsonParametr: JsonParametr
            },
            success: function () {
                App.UserLog.body.mask().hide();
            }
        });
    }

    function HistoryLogTable() {
        var fldId = App.ColHistoryLogTable.activeRecord.record.data.کد;
        App.UserLog.body.mask('در حال بارگذاری...');
        Ext.net.DirectMethod.request({
            url: '/UserLog/HistoryLogTable',
            params: {
                fldId: fldId,
                tableName: App.UserLog.queryById('NameTableHistory').getValue()
            },
            success: function () {
                App.UserLog.body.mask().hide();
            }
        });
    }

    var createTooltipLisUserLog = function (view) {
        view.tip = Ext.create('Ext.tip.ToolTip', {
            target: view.el,
            delegate: view.itemSelector,
            trackMouse: true,
            renderTo: Ext.getBody(),
            anchorOffset: 25,
            anchorSize: {
                width: 58,
                height: 20
            },
            dismissDelay: 1000000,
            autohide: false,
            anchor: 'top',
            shadow: true,
            listeners: {
                beforeshow: function (tip) {
                    Ext.net.DirectMethod.request({
                        url: '/UserLog/getUser_Info',
                        params: {
                            fldNationalCode: view.getRecord(tip.triggerElement).get('fldCodeMeli'),
                            __RequestVerificationToken: App.UserLog.queryById('antiForgeryToken').getValue()
                        },
                        success: function (data) {
                            if (view.getRecord(tip.triggerElement) != undefined) {
                                tip.update("<div style='float:right;margin-top:12px;margin-left:20px;display: inline-block;'><img class='borderrGK' style='width:120px;height:150px;' src='data:image/jpeg;base64," +
                                    data.image + "'/></div><div style='display: inline-block';><p style='margin:1;padding:0'><strong>نام و نام خانوادگی: "
                                    + view.getRecord(tip.triggerElement).get('fldName') + " " + view.getRecord(tip.triggerElement).get('fldFamily') +
                                    "</strong></p><p style='margin:1;padding:0'><strong>نام پدر: " + data.fldFatherName +
                                    "</strong></p>" + "<p style='margin:1;padding:0'><strong>کد انحصاری: " + data.fldCodeEnhesari +
                                    "</strong></p><p style='margin:1;padding:0'><strong>پست: " + data.fldPost
                                    + "</strong></p><p style='margin:1;padding:0'><strong>مدرک تحصیلی: " +
                                    data.fldDegreeOfEducationName + "</strong></p><p style='margin:1;padding:0'><strong>محل خدمت: " + data.fldTitel_MaleSazemani +
                                        "</strong></p><p style='margin:1;padding:0'><strong>نوع استخدام: " + data.TypeEstekhdam + "</strong></p></div>");
                            }
                        }
                    });
                }
            }
        });
        Ext.QuickTips.init();
    };

    function setMaxValuetxtDate(NameTxt) {
        var txtTarikh = App.UserLog.queryById(NameTxt);
        if (NameTxt == "txtStartDate") {
            txtTarikh.setRawValue('@ViewBag.fromDate');
        }
        else {
            txtTarikh.setRawValue('@ViewBag.CurrentDate');
        }
        var Maxdate = '@ViewBag.CurrentDate';
        txtTarikh.setMaxValue(Maxdate);
        txtTarikh.maxText = "تاریخ نمی تواند بزرگتر از تاریخ روز باشد.";
    }

    function setDateAzTarikhLog() {
        var txtAzTarikh = App.UserLog.queryById('txtStartDate');
        var txtTaTarikh = App.UserLog.queryById('txtEndDate');
        txtTaTarikh.setMinValue(txtAzTarikh.getValue());
        txtTaTarikh.minText = "فیلد تا تاریخ نباید قبل از فیلد از تاریخ باشد.";
        var Maxdate = '@ViewBag.CurrentDate';
        txtTaTarikh.setMaxValue(Maxdate);
        txtTaTarikh.maxText = "تاریخ نمی تواند بزرگتر از تاریخ روز باشد.";
    }

    function setDateTaTarikhLog() {
        var txtAzTarikh = App.UserLog.queryById('txtStartDate');
        var txtTaTarikh = App.UserLog.queryById('txtEndDate');
        txtAzTarikh.setMaxValue(txtTaTarikh.getValue());
        txtAzTarikh.maxText = "فیلد از تاریخ نباید بعد از فیلد تا تاریخ باشد.";
    }

    function GotoTreeUser() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/User/TreeUser',
            params: {
                State: 2
            },
            success: function () {
                Ext.net.Mask.hide();
            }
        });
    }

    function SelectTreeUser(Code) {
        if (Code == 45) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/User/TreeUser',
                params: {
                    State: 2
                },
                success: function () {
                    Ext.net.Mask.hide();
                }
            });
        }
    }

    function AddAllTransactionGroup() {
        App.UserLog.queryById('CboTransactionGroup').store.add({ 'fldId': '', 'fldName': 'همه موارد' });
        App.UserLog.queryById('CboTransactionGroup').setValue("");
    }

    function AddAllTransactionType() {
        if (App.UserLog.queryById('CboTransactionType').store.count() > 1) {
            App.UserLog.queryById('CboTransactionType').store.add({ 'fldId': '', 'fldName': 'همه موارد' });
            App.UserLog.queryById('CboTransactionType').setValue('');
        }
        else {
            App.UserLog.queryById('CboTransactionType').setValue(App.UserLog.queryById('CboTransactionType').store.getAt(0));
        }
    }

    function AddAllTableName() {
        if (App.UserLog.queryById('CboTypeSearch').getValue() == "0") {
            App.UserLog.queryById('CboTableName').store.add({ 'fldId': '', 'fldName': 'همه موارد' });
            App.UserLog.queryById('CboTableName').setValue('');
        }
        else {
            App.UserLog.queryById('CboTableName').setValue(App.UserLog.queryById('CboTableName').findRecordByDisplay("اقدامات").data.fldId);
        }
    }

    function edCboTableName() {
        if (App.UserLog.queryById('CboTransactionGroup').getValue() == 1 ) {
            App.UserLog.queryById('CboTableName').enable();
            App.UserLog.queryById('CboTableName').store.load();
        }
        else{
            App.UserLog.queryById('CboTableName').store.removeAll();
            App.UserLog.queryById('CboTableName').clearValue();
            App.UserLog.queryById('CboTableName').disable();
        }
    }

    function showHelp_VideoUserLog() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/UserLog/VideoWinUserLog',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }

    function UserLogSetSize() {
        OpenedLogForm = true;
        App.UserLog.setWidth(App.EventsWin.getWidth());
        var grid = App.UserLog.queryById('GridUserLog');
        grid.setHeight(App.EventsWin.getHeight() - 123);
        App.UserLog.queryById('GridTableLog').setHeight(App.EventsWin.getHeight() - 204);
        @*App.UserLog.queryById('txtStartDate').setRawValue('@ViewBag.CurrentDate');
        App.UserLog.queryById('txtEndDate').setRawValue('@ViewBag.CurrentDate');*@
        App.UserLog.body.mask("در حال بارگذاری...");
        Ext.net.DirectMethod.request({
            url: '/UserLog/Search',
            params: {
                StartDate: '@ViewBag.fromDate',
                EndDate: '@ViewBag.CurrentDate',
                TransactionGroupId: "",
                TransactionTypeId: "",
                TableId: "",
                Status: "",
                ip: "",
                Mac: "",
                UserSearchableId: 0,
                Sub: false,
                __RequestVerificationToken: App.UserLog.queryById('antiForgeryToken').getValue()
            },
            success: function (data) {
                if (data.Er == 0) {
                    App.UserLog.queryById('GridUserLog').store.loadData(data.ListUserLog);
                }
                else {
                    Ext.MessageBox.show({
                        title: data.MsgTitle,
                        msg: data.Msg,
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK
                    });
                }
                App.UserLog.body.mask().hide();
            },
            timeout: 7200000
        });
    }

    function LoadGridLog() {
        var txtStartDate = App.UserLog.queryById("txtStartDate");
        var txtEndDate = App.UserLog.queryById("txtEndDate");
        var txtIP = App.UserLog.queryById("txtIP");
        var txtMac = App.UserLog.queryById("txtMac");
        var CboTypeop = App.UserLog.queryById("CboTypeop");
        var CboTableName = App.UserLog.queryById("CboTableName");
        var CboTypeSearch = App.UserLog.queryById("CboTypeSearch");

        if ((txtStartDate.getRawValue() != "" && txtEndDate.getRawValue() == "") || (txtStartDate.getRawValue() == "" && txtEndDate.getRawValue() != "")) {
            Ext.MessageBox.show({
                title: "خطا",
                msg:"لطفا از تاریخ و تا تاریخ را وارد نمایید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
        else {
            if (CboTypeSearch.getValue() == "0") {
                if (txtStartDate.validate() && txtEndDate.validate() && txtIP.validate() && ((txtMac.getValue() != "" && txtMac.validate()) || txtMac.getValue() == "")) {
                    App.UserLog.body.mask("در حال بارگذاری...");
                    Ext.net.DirectMethod.request({
                        url: '/UserLog/Search',
                        params: {
                            StartDate: txtStartDate.getRawValue(),
                            EndDate: txtEndDate.getRawValue(),
                            TransactionGroupId: App.UserLog.queryById("CboTransactionGroup").getValue(),
                            TransactionTypeId: App.UserLog.queryById("CboTransactionType").getValue(),
                            TableId: CboTableName.getValue(),
                            Status: App.UserLog.queryById("CboResult").getValue(),
                            ip: txtIP.getValue(),
                            Mac: txtMac.getValue(),
                            UserSearchableId: App.UserLog.queryById("SearchableUserId").getValue(),
                            Sub: App.UserLog.queryById("chkSub").getValue(),
                            __RequestVerificationToken: App.UserLog.queryById('antiForgeryToken').getValue()
                        },
                        success: function (data) {
                            if (data.Er == 0) {
                                App.UserLog.queryById('GridUserLog').show();
                                App.UserLog.queryById('GridTableLog').hide();
                                App.UserLog.queryById('GridUserLog').store.loadData(data.ListUserLog);
                                App.UserLog.queryById('GridUserLog').setHeight(App.EventsWin.getHeight() - 230);
                            }
                            else {
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: Ext.MessageBox.ERROR,
                                    buttons: Ext.MessageBox.OK
                                });
                            }
                            App.UserLog.body.mask().hide();
                            CboTypeSearch.focus();
                        },
                        timeout: 7200000
                    });
                }
            }
            else {
                if (txtStartDate.validate() && txtEndDate.validate()) {
                    App.UserLog.body.mask("در حال بارگذاری...");
                    Ext.net.DirectMethod.request({
                        url: '/UserLog/Search_Table',
                        params: {
                            AzTarikh: txtStartDate.getRawValue(),
                            TaTarikh: txtEndDate.getRawValue(),
                            NameTable: CboTableName.findRecordByValue(CboTableName.getValue()).data.fldEnNameTables,
                            Type: App.UserLog.queryById("CboTypeop").getValue(),
                            __RequestVerificationToken: App.UserLog.queryById('antiForgeryToken').getValue()
                        },
                        success: function (data) {
                            if (data.Er == 0) {
                                App.UserLog.queryById('GridUserLog').hide();
                                App.UserLog.queryById('GridTableLog').show();

                                if (App.UserLog.queryById('GridTableLog').columnManager.columns != null) {
                                    var lengthth=App.UserLog.queryById('GridTableLog').columnManager.columns.length - 1;
                                    for (var i = 0; i < lengthth; i++) {
                                        App.UserLog.queryById('GridTableLog').headerCt.remove(0);
                                    }
                                }
                                var modelFields = new Array();
                                for (var i = 0; i < data.ColName.length; i++) {
                                    modelFields.push(data.ColName[i]);
                                    if (data.ColName[i] != "typeId") {
                                        var column = Ext.create('Ext.grid.column.Column', {
                                            text: data.ColName[i],
                                            dataIndex: data.ColName[i],
                                            wrap: true,
                                            flex: 3
                                        });
                                        App.UserLog.queryById('GridTableLog').headerCt.insert(
                                          App.UserLog.queryById('GridTableLog').columns.length - 1,
                                          column);
                                    }
                                }
                                App.UserLog.queryById('GridTableLog').headerCt.setHeight(30);
                                Ext.define('tableLogModel', {
                                    extend: 'Ext.data.Model',
                                    fields: modelFields
                                });
                                var myStore = Ext.create('Ext.data.Store', {
                                    model: 'tableLogModel',
                                    autoLoad:false
                                });
                                App.UserLog.queryById('GridTableLog').bindStore(myStore);
                                App.UserLog.queryById('GridTableLog').store.loadData(data.Info);
                                App.UserLog.queryById('NameTableHistory').setValue(CboTableName.findRecordByValue(CboTableName.getValue()).data.fldEnNameTables);
                                App.UserLog.queryById('GridTableLog').setHeight(App.EventsWin.getHeight() - 204);
                            }
                            else {
                                Ext.MessageBox.show({
                                    title: data.MsgTitle,
                                    msg: data.Msg,
                                    icon: Ext.MessageBox.ERROR,
                                    buttons: Ext.MessageBox.OK
                                });
                            }
                            App.UserLog.body.mask().hide();
                            CboTypeSearch.focus();
                        },
                        timeout: 7200000
                    });
                }
            }
        }
    }

    function HelpUserLog() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/UserLog/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }

    var addKeyMapUserLog = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    if (Ext.Element.getActiveElement().name == "") {
                        LoadGridLog();
                        return;
                    }
                    else {
                        var keyfield = App.UserLog.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                        var nextfld;
                        if (keyfield.itemId == "CboTransactionGroup") {
                            if (App.UserLog.queryById("CboTransactionGroup").getValue() == "") {
                                nextfld = App.UserLog.queryById("CboResult");
                            }
                            else {
                                nextfld = App.UserLog.queryById("CboTransactionType");
                            }
                        }
                        else if (keyfield.itemId == "CboTransactionType") {
                            if (App.UserLog.queryById("CboTableName").disabled == true) {
                                nextfld = App.UserLog.queryById("CboResult");
                            }
                            else {
                                nextfld = App.UserLog.queryById("CboTableName");
                            }
                        }
                        else if (keyfield.itemId == "txtMac") {
                            nextfld = App.UserLog.queryById("txtSearchableUser");
                        }
                        else if (keyfield.itemId == "txtSearchableUser") {
                            nextfld = App.UserLog.queryById("chkSub");
                        }
                        else if (keyfield.itemId == "txtEndDate") {
                            if (App.UserLog.queryById("CboTypeSearch").getValue() == "0") {
                                nextfld = App.UserLog.queryById("CboTransactionGroup");
                            }
                            else {
                                nextfld = App.UserLog.queryById("CboTableName");
                            }
                        }
                        else if (keyfield.itemId == "CboTableName") {
                            if (App.UserLog.queryById("CboTypeSearch").getValue() == "0") {
                                nextfld = App.UserLog.queryById("CboResult");
                            }
                            else {
                                nextfld = App.UserLog.queryById("CboTypeop");
                            }
                        }
                        else if (keyfield.itemId == "CboTypeop") {
                            LoadGridLog();
                            return;
                        }
                        else {
                            nextfld = keyfield.nextSibling().nextSibling();
                        }
                        nextfld.focus();
                        nextfld.selectText();
                    }
                }
            }]
        });
    }
</script>