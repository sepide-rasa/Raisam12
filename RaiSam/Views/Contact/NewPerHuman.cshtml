@model IEnumerable<RaiSam.Models.prs_tblContactSelect>
@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;
@using Ext.Net.Utilities;
@{
    var X = Html.X();
}
<script>
    Ext.net.FilterHeader.behaviour.string[0].match = function (recordValue, matchValue) {
        return (Ext.net.FilterHeader.behaviour.getStrValue(recordValue) || "").indexOf(matchValue) > -1;
    };

    Ext.net.FilterHeader.behaviour.string[0].getStrValue = function (value) {
        return value.toString();
    };

    Ext.net.FilterHeader.behaviour.string[0].serialize = function (value) {
        return {
            type: "string",
            op: "*",
            value: value
        };
    };
</script>
@(Html.X().Window()
        .Listeners(li => { li.Render.Fn = "addKeyMapNewContact_H"; })
    .Closable(true)
    .Title("ثبت تماس (" + ViewBag.Name + ")")
    .ID("NewContact_H")
    .Width(870)
    .Height(550)
    .AutoScroll(true)
    .Modal(true)
    .Resizable(false)
    .Closable(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
    .Layout(LayoutType.VBox)
    .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Center })
    .Items(
         X.AntiForgeryField()
        .ItemID("antiForgeryToken")
        .Hidden(true),
        X.FieldSet()
            .Border(true)
            .Title("مشخصات تماس")
            .Layout(LayoutType.Table)
            .Defaults(new { Margin = 2 })
            .LayoutConfig(new TableLayoutConfig { Columns = 4 })
            .Items(
                X.Hidden().ItemID("fldId"),
                X.Label("نوع تماس:"),
                X.ComboBox()
                    .Width(200)
                    .AutoFocus(true)
                    .ItemID("CboContactType")
                    .EmptyText("نوع تماس...")
                    .AllowBlank(false)
                    .BlankText("لطفا نوع تماس را انتخاب نمایید.")
                    .TypeAhead(true)
                    .Editable(false)
                    .QueryMode(DataLoadMode.Local)
                    .Listeners(l => l.Change.Handler = "setDirection()")
                    .ForceSelection(true)
                    .TriggerAction(TriggerAction.All)
                    .DisplayField("fldName")
                    .ValueField("ID")
                    .Store(
                        X.Store()
                            .Listeners(l => l.Load.Handler = "setDefaultCboContactType();")
                            .Model(X.Model()
                                .IDProperty("ID")
                                .Fields(
                                    new ModelField("ID", ModelFieldType.String) { Mapping = "ID" },
                                    new ModelField("fldName", ModelFieldType.String) { Mapping = "fldName" }
                                )
                            )
                            .Listeners(l => l.BeforeLoad.Handler = "App.NewContact_H.queryById('CboContactType').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.NewContact_H.queryById('antiForgeryToken').getValue());")
                            .Proxy(X.AjaxProxy()
                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                .Url(Url.Action("GetContactType"))
                                .Reader(X.JsonReader().Root("data"))
                            )
                    ),
                X.Label("وضعیت:"),
                X.ComboBox()
                    .Width(200)
                    .ItemID("CboStatus")
                    .Editable(false)
                    .TypeAhead(true)
                    .BlankText("لطفا وضعیت را انتخاب کنید.")
                    .QueryMode(DataLoadMode.Local)
                    .TriggerAction(TriggerAction.All)
                    .AllowBlank(false)
                    .EmptyText("وضعیت...")
                    .Items(
                        new ListItem("عمومی", "0"),
                        new ListItem("خصوصی", "1"),
                        new ListItem("عمومی برای کاربران زیر شاخه", "2")
                    )
                    .SelectedItems(new { Value = "1" }),
                X.Label("مقدار:"),
                X.TextField()
                    .Width(449)
                    .ItemID("txtValue")
                    .MaxLength(800)
                    .EnforceMaxLength(true)
                    .AllowBlank(false)
                    .BlankText("لطفا مقدار را وارد کنید.")
                    .ColSpan(3)
                ),
        X.FieldSet()
            .LayoutConfig(new TableLayoutConfig { Columns = 6 })
            .Defaults(new { Margin = 2 })
            .Border(false)
            .Items(
                X.Button()
                    .Text("ذخیره")
                    .Icon(Ext.Net.Icon.Disk)
                    .Listeners(l => l.Click.Handler = "SaveContact_H()"),
                X.Button()
                    .Text("خروج")
                    .Icon(Ext.Net.Icon.DoorOut)
                    .OnClientClick("App.NewContact_H.destroy();")
            ),
        X.Panel()
            .Title("لیست تماس های ثبت شده")
            .Layout(LayoutType.Fit)
            .Border(false)
            .Frame(true)
            .Items(
                X.GridPanel()
                    .AutoScroll(true)
                    .TopBar(
                        X.Toolbar()
                            .Items(
                                X.Button()
                                    .Text("ویرایش")
                                    .Icon(Ext.Net.Icon.Pencil)
                                    .Listeners(l => l.Click.Handler = "EditContact_H()"),
                                X.Button()
                                    .Text("حذف")
                                    .Icon(Ext.Net.Icon.Delete)
                                    .Listeners(l => l.Click.Handler = "DeleteContact_H()")
                            )
                    )
                    .Border(false)
                    .ItemID("GridListContacts")
                    .BottomBar(X.PagingToolbar())
                    .Plugins(X.FilterHeader().Remote(false))
                    .Width(830)
                    .Height(360)
                    .Store(
                        X.StoreForModel()
                            .Listeners(l => l.BeforeLoad.Handler = "App.NewContact_H.queryById('GridListContacts').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.NewContact_H.queryById('antiForgeryToken').getValue());")
                            .Listeners(l => l.DataChanged.Handler = "App.NewContact_H.queryById('GridListContacts').selModel.refresh();")
                            .Proxy(Html.X().AjaxProxy()
                                .ActionMethods(l => l.Read = Ext.Net.HttpMethod.POST)
                                .Url(Url.Action("ReadContact_H"))
                                .Reader(Html.X().JsonReader().Root("data"))
                                        .ExtraParams(pa => pa.Add(new { Id = ViewBag.Id, State = ViewBag.State }))
                            )
                            .PageSize(10)
                            .RemoteFilter(false)
                            .RemotePaging(false)
                    )
                    .View(
                        Html.X().GridView().LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Flex(1).Hidden(true),
                        Html.X().Column().DataIndex(Model, m => m.NameTypeContact).Text("نوع تماس").Flex(1),
                        Html.X().Column().DataIndex(Model, m => m.fldTyperName).Text("وضعیت تماس").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldValue).Text("مقدار").Flex(5).Wrap(true)
                    )
             )
        )
)

<script type="text/javascript">
    var ContactID = 0;
    function setDefaultCboContactType() {
        /*  App.NewContact_H.queryById("CboContactType").setValue(App.NewContact_H.queryById("CboContactType").store.getAt(0));*/
        App.NewContact_H.queryById("CboContactType").setValue("2");
    }

    function setDirection() {
        App.NewContact_H.queryById("txtValue").setValue("");
        if (App.NewContact_H.queryById("CboContactType").getValue() == 1) {
            App.NewContact_H.queryById("txtValue").setFieldStyle("direction:rtl");
        }
        else {
            App.NewContact_H.queryById("txtValue").setFieldStyle("direction:ltr");
        }
    }
    var fldTimeStamp_H = 0;
    function SaveContact_H() {
        var txtValue = App.NewContact_H.queryById('txtValue');
        var Id = App.NewContact_H.queryById('fldId');
        var CboStatus = App.NewContact_H.queryById('CboStatus');
        var CboContactType = App.NewContact_H.queryById('CboContactType');

        var er = false;
        if (txtValue.validate() == false) {
            er = true;
        }
        if (CboContactType.validate() == false) {
            er = true;
        }
        if (CboStatus.validate() == false) {
            er = true;
        }
        if (er == true)
            return;
        App.NewContact_H.body.mask("در حال بررسی...");
        Ext.net.DirectMethod.request({
            url: '/Contact/CheckValidate',
            params: {
                Value: txtValue.getValue(),
                ContactTypeId: CboContactType.getValue(),
                __RequestVerificationToken: App.NewContact_H.queryById('antiForgeryToken').getValue()
            },
            success: function (result) {
                if (result.Er == 1) {
                    Ext.MessageBox.show({
                        title: result.MsgTitle,
                        msg: result.Msg,
                        icon: Ext.MessageBox.ERROR,
                        buttons: Ext.MessageBox.OK,
                    });
                    App.NewContact_H.body.mask().hide();
                }
                else {
                    if (result.Valid == false) {
                        Ext.MessageBox.show({
                            title: "خطا",
                            msg: "مقدار وارد شده نامعتبر است.",
                            icon: Ext.MessageBox.ERROR,
                            buttons: Ext.MessageBox.OK,
                        });
                        App.NewContact_H.body.mask().hide();
                    }
                    else {
                        var AshkhasId = 0; var marakezTebId = 0; var Ashkhashoghooghi = 0;
                        if ('@ViewBag.State' == 1)
                            AshkhasId = '@ViewBag.Id';
                        else if ('@ViewBag.State' == 2)
                            marakezTebId = '@ViewBag.Id';
                        else if ('@ViewBag.State' == 3)
                            Ashkhashoghooghi = '@ViewBag.Id';

                        App.NewContact_H.body.mask("در حال ذخیره سازی");
                        Ext.net.DirectMethod.request({
                            url: '/Contact/Save',
                            params: {
                                fldId: Id.getValue(),
                                fldValue: txtValue.getValue(),
                                fldType: CboStatus.getValue(),
                                fldTypeContactId: CboContactType.getValue(),
                                fldTimeStamp: fldTimeStamp_H,
                                fldMarakezTeb: null,
                                fldAshkhasId: AshkhasId,
                                fldMarakezTeb: marakezTebId,
                                fldAshkhashoghooghi: Ashkhashoghooghi,
                                __RequestVerificationToken: App.NewContact_H.queryById('antiForgeryToken').getValue()
                            },
                            success: function (data) {
                                chat.server.reloadLog();
                                if (data.Er == 1 && data.Change == 1) {/*vaghti TimeStamp==0*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.WARNING,
                                        buttons: Ext.MessageBox.OK,
                                        fn: function (btn) {
                                            if (btn == 'ok') {
                                                LoadEttelaatContact(ContactID);
                                            }
                                        }
                                    });
                                }
                                else if (data.Er == 1 && data.Change == 2) {/*vaghti TimeStamp==2*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK,
                                        fn: function (btn) {
                                            if (btn == 'ok') {
                                                ClearNewContact_H();
                                            }
                                        }
                                    });
                                }
                                else if (data.Er == 1) {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK,
                                    });
                                }
                                else {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.INFO,
                                        buttons: Ext.MessageBox.OK,
                                    });
                                }
                                App.NewContact_H.queryById('GridListContacts').store.load();
                                if (data.Er != 1)
                                    ClearNewContact_H();
                                App.NewContact_H.body.mask().hide();
                            }
                        });
                    }
                }
            }
        });
    }
    function LoadEttelaatContact(Id) {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Contact/Details',
            params: {
                Id: Id,
                __RequestVerificationToken: App.NewContact_H.queryById('antiForgeryToken').getValue()
            },
            success: function (data) {
                var fldId = App.NewContact_H.queryById("fldId");
                fldId.setValue(data.fldId);

                var txtValue = App.NewContact_H.queryById("txtValue");
                txtValue.setValue(data.fldValue);

                var CboStatus = App.NewContact_H.queryById("CboStatus");
                CboStatus.setValue(String(data.fldType));

                var CboContactType = App.NewContact_H.queryById("CboContactType");
                CboContactType.setValue(String(data.fldTypeContactId));

                fldTimeStamp_H = data.fldTimeStamp;
                Ext.net.Mask.hide();
            }
        });

    }
    function EditContact_H() {
        var SelectedRow = App.NewContact_H.queryById('GridListContacts').selModel.getLastSelected();
        if (SelectedRow != null) {
            ContactID = SelectedRow.data.fldId;
            var fldId = App.NewContact_H.queryById("fldId");
            fldId.setValue(SelectedRow.data.fldId);

            var txtValue = App.NewContact_H.queryById("txtValue");
            txtValue.setValue(SelectedRow.data.fldValue);

            var CboStatus = App.NewContact_H.queryById("CboStatus");
            CboStatus.setValue(String(SelectedRow.data.fldType));

            var CboContactType = App.NewContact_H.queryById("CboContactType");
            CboContactType.setValue(String(SelectedRow.data.fldTypeContactId));

            fldTimeStamp_H = SelectedRow.data.fldTimeStamp;
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function DeleteContact_H() {
        var SelectedRow = App.NewContact_H.queryById('GridListContacts').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                    if (btn == 'yes') {
                        App.NewContact_H.body.mask("در حال انجام عملیات...");
                        Ext.net.DirectMethod.request({
                            url: '/Contact/Delete',
                            params: {
                                id: SelectedRow.data.fldId,
                                TimeStamp: SelectedRow.data.fldTimeStamp,
                                __RequestVerificationToken: App.NewContact_H.queryById('antiForgeryToken').getValue()
                            },
                            success: function (data) {
                                chat.server.reloadLog();
                                if (data.Er == 1 && data.Change == 1) {/*vaghti TimeStamp==0*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.WARNING,
                                        buttons: Ext.MessageBox.OK,
                                        fn: function (btn) {
                                            if (btn == 'ok') {
                                                App.NewContact_H.queryById('GridListContacts').store.load();
                                            }
                                        }
                                    });
                                }
                                else if (data.Er == 1 && data.Change == 2) {/*vaghti TimeStamp==2*/
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK,
                                        fn: function (btn) {
                                            if (btn == 'ok') {
                                                App.NewContact_H.queryById('GridListContacts').store.load();
                                            }
                                        }
                                    });
                                }
                                else if (data.Er == 1) {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.INFO,
                                        buttons: Ext.MessageBox.OK
                                    });
                                    App.NewContact_H.queryById('GridListContacts').store.load();
                                }
                                App.NewContact_H.body.mask().hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function ClearNewContact_H() {
        fldTimeStamp_H = 0; ContactID = 0;
        App.NewContact_H.queryById("fldId").setValue(0);
        App.NewContact_H.queryById("txtValue").setValue("");
        App.NewContact_H.queryById('CboContactType').focus();
    }

    var addKeyMapNewContact_H = function (cmp) {
        this.keyMap = new Ext.util.KeyMap({
            target: cmp.getEl(),
            binding: [{
                key: [13, 9], /*Ext.EventObject.ENTER,*/
                fn: function (key, e) {
                    if (e.getKey() == 9) {
                        e.stopEvent();
                    }
                    var keyfield = App.NewContact_H.queryById(Ext.getCmp((Ext.Element.getActiveElement()).name).itemId);
                    var nextfld;
                    if (keyfield.itemId == "txtValue") {
                        SaveContact_H();
                        return;
                    }
                    else {
                        nextfld = keyfield.nextSibling().nextSibling();
                    }
                    nextfld.focus();
                    nextfld.selectText();
                }
            }]
        });
    }
</script>