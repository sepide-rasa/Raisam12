@model RaiSam.Models.prs_tblOperationSelect

@using Ext.Net.MVC
@using Hogaf.ExtNet.UX
@using Ext.Net;

@{
    var X = Html.X();
    RaiSam.Models.UserInfo u = (RaiSam.Models.UserInfo)Session["User"];
    int userId = u.UserSecondId;
}
<script>
    var ShowIcon_Operation = function (value, record) {
        if (value == null) {
            return "";
        }
        else {
            pic = "data:image/png;base64," + value;
            var template = "<img src=" + pic + " style='width:17px;height:17px;' />";
            return template;
        }
    };


</script>
@(X.Panel()
    .Title("اکشن")
    .Border(false)
        .ID("Operation")
    .Closable(true)
    .AutoScroll(true)
    .CloseAction(Ext.Net.CloseAction.Destroy)
            .Listeners(li => li.AfterRender.Handler = "setHeightOperation();")
    .Items(
             X.AntiForgeryField()
                .ItemID("antiForgeryToken")
                .Hidden(true),
        X.Panel()
            .Border(false)
            .AutoScroll(true)
            .Layout(Ext.Net.LayoutType.VBox)
            .LayoutConfig(new VBoxLayoutConfig { Align = VBoxAlign.Stretch })
            .Items(
                X.GridPanel()
                    .AutoScroll(true)
                        .ItemID("GridOperation")
                    .BottomBar(X.PagingToolbar())
                    .TopBar(
                        Html.X().Toolbar()
                                .Items(
                                    X.Button().Text("اعمال ترتیب").Icon(Ext.Net.Icon.Disk)
                                                        .Listeners(Li => Li.Click.Handler = "SaveOrderOperation();"),
                                X.Button()
                                    .Text("جدید")
                                    .Icon(Ext.Net.Icon.Add)
                                        .Listeners(li => li.Click.Handler = "NewOperation();"),
                                X.Button()
                                    .Text("ویرایش")
                                    .Icon(Ext.Net.Icon.Pencil)
                                            .Listeners(li => li.Click.Handler = "EditOperation();")
                                                .Hidden(@userId != 1),
                                X.Button()
                                    .Text("حذف")
                                    .Icon(Ext.Net.Icon.Delete)
                                            .Listeners(li => li.Click.Handler = "DeleteOperation();")
                                                    .Hidden(@userId != 1),
                                           X.SplitButton()
                                        .Text("راهنما")
                                        .Icon(Ext.Net.Icon.Help)
                                        .Menu(X.Menu()
                                        .Items(
                                        X.MenuItem()
                                                    .Text("راهنما متنی")
                                                    .Icon(Ext.Net.Icon.TextPaddingTop)
                                                                .Listeners(l => l.Click.Handler = "HelpOperation()")
                                                    .ItemID("btnshowHelpDirectorate"),
                                            X.MenuItem()
                                                    .Text("راهنما تصویری")
                                                    .Icon(Ext.Net.Icon.PlayBlue)
                                                        .Listeners(l => l.Click.Handler = "showHelp_VideoOperation()")

                                    )
                                )
        //X.Button()
        //.Text("راهنما")
        //.Icon(Ext.Net.Icon.Help)
        //    .Listeners(li => li.Click.Handler = "HelpOperation();")
                        )
                    )
                    .Store(
                        X.StoreForModel()
                            .Listeners(l => l.DataChanged.Handler = "App.Operation.queryById('GridOperation').selModel.refresh();")
                        .Listeners(l => l.BeforeLoad.Handler = "App.Operation.queryById('GridOperation').getStore().getProxy().setExtraParam('__RequestVerificationToken', App.Operation.queryById('antiForgeryToken').getValue());")
                                    .Proxy(Html.X().AjaxProxy()
                                        .ActionMethods(l => l.Read = HttpMethod.POST)
                                .Url(Url.Action("Read"))
                                .Reader(Html.X().JsonReader().Root("data"))
                        )
                            .PageSize(200)
                            .RemoteFilter(true)
                            .RemotePaging(true)
                    )
                    .ViewConfig(
                        X.GridView()
                            .LoadingText("در حال بارگذاری...").RTL(true)
                    )
                    .Plugins(X.FilterHeader().Remote(true))
                    .ColumnModel(
                        Html.X().RowNumbererColumn(),
                            Html.X().Column().DataIndex(Model, m => m.fldId).Text("کد").Hidden(true).Flex(1),
                                                Html.X().ImageCommandColumn().Align(Ext.Net.Alignment.Center).Sortable(false).Listeners(l => l.Command.Fn = "SetOrderOperation").PrepareCommand("showhideorderOperation").Flex(1).Commands(
                                        Html.X().ImageCommand().CommandName("RowDownOperation").Icon(Ext.Net.Icon.ArrowDown),
                                        Html.X().ImageCommand().CommandName("RowUpOperation").Icon(Ext.Net.Icon.ArrowUp)),
                        Html.X().Column().DataIndex(Model, m => m.fldFile).Filterable(false).Flex(1).Renderer("ShowIcon_Operation").Align(Ext.Net.Alignment.Center),
                        Html.X().Column().DataIndex(Model, m => m.fldName).Text("عنوان اکشن").Flex(3).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldNoeCharkheshName).Text("عامل قابل چرخش")

                            .Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldTypeName).Text("نوع استفاده").Flex(2),
                       // Html.X().Column().DataIndex(Model, m => m.fldTitleMoayenatDynamic).Text("عنوان معاینه داینامیک").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldActive_DeactiveName).Text("وضعیت").Flex(1).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldEffectiveName).Text("نوع اکشن").Flex(1).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldFA_Name).Text("نام تابع").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldNameDataType).Text("نوع خروجی").Flex(1).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldGroupName).Text("وضعیت اعمال").Flex(1).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldUsableName).Text("نمایش در کارتابل عمومی").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldSpecificShowName).Text("نمایش در کارتابل تخصصی").Flex(2).Wrap(true),
                        Html.X().Column().DataIndex(Model, m => m.fldDescAction).Text("شرح خروجی").Flex(5).Wrap(true)/*,
                        Html.X().ComponentColumn().ID("ColFormulaWriterOP").Flex(2).Component(Html.X().Button().Icon(Icon.PageWhiteCode).Text("صحت سنجی")
                                .Listeners(l => l.Click.Handler = "GotoFormulaWriterOP();")).Filterable(false)*/
                    )
                    .SelectionModel(
                        Html.X().RowSelectionModel()
                            .Mode(Ext.Net.SelectionMode.Single)
                    )
                )
            )
)

<script type="text/javascript">
    function showHelp_VideoOperation() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Operation/VideoWinOperation',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });

    }
    function HelpOperation() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Operation/Help',
            success: function (data) {
                Ext.net.Mask.hide();
            }
        });
    }
    function GotoFormulaWriterOP() {
        var record = App.ColFormulaWriterOP.activeRecord.record;
        openWindowWithPost("/ComputationFormula/Formul", {
            Id: record.data.fldId,
            FieldName: "Operation",
            FormulId: record.data.fldFormulId,
            Name: "صحت سنجی اکشن " + record.data.fldName
        });
    }

    function setHeightOperation() {
        App.Operation.queryById('GridOperation').setHeight(App.OperationWin.getHeight() - 83);
        Ext.net.Mask.hide();
        InsertToLog("اکشن", 2, true);
    }

    function EditOperation() {
        var SelectedRow = App.Operation.queryById('GridOperation').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
            Ext.net.DirectMethod.request({
                url: '/Operation/New',
                params: {
                    Id: SelectedRow.data.fldId
                },
                success: function () {
                    /*Ext.net.Mask.hide();*/
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }

    function NewOperation() {
        Ext.net.Mask.show({ msg: 'در حال بارگذاری...' });
        Ext.net.DirectMethod.request({
            url: '/Operation/New',
            params: {
                Id: 0
            },
            success: function () {
                /*Ext.net.Mask.hide();*/
            }
        });
    }

    function DeleteOperation() {
        var SelectedRow = App.Operation.queryById('GridOperation').selModel.getLastSelected();
        if (SelectedRow != null) {
            Ext.MessageBox.show({
                title: "هشدار",
                msg: "آیا برای حذف مطمئن هستید؟",
                icon: Ext.MessageBox.WARNING,
                buttons: Ext.MessageBox.YESNO,
                fn: function (btn) {
                if (btn == 'yes') {
                        Ext.net.Mask.show({ msg: 'در حال انجام عملیات...' });
                        Ext.net.DirectMethod.request({
                            url: '/Operation/Delete',
                            params: {
                                Id: SelectedRow.data.fldId,
                                TimeStamp: SelectedRow.data.fldTimeStamp,
                                __RequestVerificationToken: App.Operation.queryById('antiForgeryToken').getValue()
                            },
                            success: function (data) {
                                chat.server.reloadLog();
                                if (data.Er == 1 || data.outTimeStamp == 2) {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.ERROR,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else if (data.outTimeStamp == 0) {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.WARNING,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                else {
                                    Ext.MessageBox.show({
                                        title: data.MsgTitle,
                                        msg: data.Msg,
                                        icon: Ext.MessageBox.INFO,
                                        buttons: Ext.MessageBox.OK
                                    });
                                }
                                App.Operation.queryById('GridOperation').store.load();
                                Ext.net.Mask.hide();
                            }
                        });
                    }
                }
            });
        }
        else {
            Ext.MessageBox.show({
                title: "خطا",
                msg: "لطفا یک سطر را انتخاب کنید.",
                icon: Ext.MessageBox.ERROR,
                buttons: Ext.MessageBox.OK
            });
        }
    }
    var showhideorderOperation = function (grid, command, record, rowIndex) {
        if (command.command == 'RowDownOperation') {
            if (rowIndex == App.Operation.queryById("GridOperation").store.count() - 1) {
                command.disabled = true;
            }
            else {
                command.disabled = false;
            }
        }
        else {
            if (rowIndex == 0) {
                command.disabled = true;
            }
            else {
                command.disabled = false;
            }
        }
    };
    var SetOrderOperation = function (grid, command, record, rowIndex) {
        var grid = App.Operation.queryById("GridOperation");
        if (command == 'RowDownOperation') {
            grid.getStore().remove(record);
            grid.getStore().insert(rowIndex + 1, record);
            grid.getView().refresh();
        }
        else {
            grid.getStore().remove(record);
            grid.getStore().insert(rowIndex - 1, record);
            grid.getView().refresh();
        }
    };
    function SaveOrderOperation() {
        var Grid = App.Operation.queryById("GridOperation");
        var Order = new Array();
        for (var i = 0; i < Grid.store.count() ; i++) {
            var item = Grid.store.data.items[i];
            Order.push({
                "fldId": item.data.fldId,
                "order": Grid.store.indexOf(item) + 1
            });
        }
        Order1 = JSON.stringify(Order);
        Ext.net.Mask.show({ msg: 'در حال ذخیره سازی...' });
        $.ajax({
            type: "POST",
            url: '/Operation/SaveOrder',
            datatype: "json",
            data:{
                       Order: Order1
                        , __RequestVerificationToken: App.Operation.queryById('antiForgeryToken').getValue()
                   },
            /*contentType: 'application/json',*/
            success: function (result) {
                var ic = Ext.MessageBox.INFO;
                if (result.Er == 1) {
                    ic = Ext.MessageBox.ERROR;
                }
                Ext.MessageBox.show({
                    title: result.MsgTitle,
                    msg: result.Msg,
                    icon: ic,
                    buttons: Ext.MessageBox.OK
                });
                if (result.Er != 1) {
                    App.Operation.queryById("GridOperation").store.load();
                }
                Ext.net.Mask.hide();
            }
        });
    }
</script>

